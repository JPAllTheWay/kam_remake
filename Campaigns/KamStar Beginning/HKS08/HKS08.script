
var Malcolm,Store:Integer;
	Count:Array of Integer;
	dMod:Byte;
{$I Language.script}
  procedure AutoFeed;
var K, I: Integer;
	UnitsToFeed: array of Integer;
begin
	for I := 1 to 1 do begin
		UnitsToFeed := States.PlayerGetAllUnits(I);
		for K := 0 to length(UnitsToFeed) - 1 do begin
			Actions.UnitHungerSet(UnitsToFeed[K], States.UnitMaxHunger);
		end;
	end; 
end;
	   
Procedure OnHousePlanPlaced(aPlayer: Integer; X: Integer; Y: Integer; aType: Integer);
begin
	if (aPlayer = 0) and (States.HouseRepair(Store)) then begin
		Actions.PlanConnectRoad(0,X,Y+1,States.HousePositionX(States.ClosestHouse(0,X,Y,11)),States.HousePositionY(States.ClosestHouse(0,X,Y,11))+1,false);
	end;
end;
procedure OnTick;
var HType:Integer;
begin
	If States.GameTime mod 10=0 then begin
		If (States.UnitPositionY(Malcolm) > 2) and(States.HouseAt(States.UnitPositionX(Malcolm),States.UnitPositionY(Malcolm)-1)<>-1) then begin
			HType:= States.HouseType(States.HouseAt(States.UnitPositionX(Malcolm),States.UnitPositionY(Malcolm)-1))
			If (States.HouseSiteIsDigged(States.HouseAt(States.UnitPositionX(Malcolm),States.UnitPositionY(Malcolm)-1)) = true)and (States.HouseOwner(States.HouseAt(States.UnitPositionX(Malcolm),States.UnitPositionY(Malcolm)-1)) = 0) then
				Actions.HouseAddBuildingProgress(States.HouseAt(States.UnitPositionX(Malcolm),States.UnitPositionY(Malcolm)-1));		
			If (States.HouseIsComplete(States.HouseAt(States.UnitPositionX(Malcolm),States.UnitPositionY(Malcolm)-1)) = true) and(States.HouseDamage(States.HouseAt(States.UnitPositionX(Malcolm),States.UnitPositionY(Malcolm)-1)) < States.HouseTypeMaxHealth(HType)-5)and (States.HouseOwner(States.HouseAt(States.UnitPositionX(Malcolm),States.UnitPositionY(Malcolm)-1)) = 0) then
				Actions.HouseAddRepair(States.HouseAt(States.UnitPositionX(Malcolm),States.UnitPositionY(Malcolm)-1),5);
		end;
	end;
	if States.GameTime = 1 then begin
		Actions.OverlayTextSetFormatted(-1, '', []);
		Actions.OverlayTextAppendFormatted(-1, '<$0>', []);
		Malcolm := States.UnitAt(60,41)
	end;
	if States.GameTime = 200 then
		Actions.OverlayTextSetFormatted(-1, '', []);
	if States.GameTime = 18000 then begin
		Actions.OverlayTextSetFormatted(-1, '', []);
		Actions.OverlayTextAppendFormatted(-1, '<$1>', []); end;
	if States.GameTime = 18200 then
		Actions.OverlayTextSetFormatted(-1, '', []);
	if States.GameTime = 100980 then begin
		Actions.OverlayTextSetFormatted(-1, '', []);
		Actions.OverlayTextAppendFormatted(-1, '<$2>', []); end;
	if (States.GameTime mod 6000 = 0)and(States.GameTime >= 18000)  then begin
		Actions.GiveGroup (1, 24, 32, 6, 6, Count[dMod]+States.KamRandomI(5), 8 )
		Actions.GiveGroup (1, 24, 10, 92, 6, Count[dMod]+States.KamRandomI(5), 8 )
		Actions.GiveGroup (1, 24, 140, 56, 6, Count[dMod]+States.KamRandomI(5), 8)
	end;
	if States.GameTime = 101100 then
		Actions.OverlayTextSetFormatted(-1, '', []);
	if States.GameTime = 101000 then
		Actions.GiveGroup (0, 16, 138, 10, 0, 12, 4 );
	if States.GameTime MOD 9000 = 0 then
		Autofeed;
end;

Procedure OnMissionStart;
var	Difficulty: TKMMissionDifficulty;
var Houses:array of integer;
	LL:integer;
begin
	Houses:=States.PlayerGetAllHouses(0);
	for LL:=0 to length(Houses)-1 do begin
		If (States.HouseType(Houses[LL])=11) and (Store=0) then
			Store:=Houses[LL];
	end;
	Difficulty:=States.MissionDifficulty();
	dMod:= byte(Difficulty)-1;
	Count:=[1,4,8,12,14,16,20];
end;

procedure OnPlayerVictory(aIndex: Integer);
var
	aHouse,aUnit,aGroup: array of Integer;
	H, M,Width,Hight,R,Back,Front,UNITSL,GROUPSL: Integer;
begin
	SetLength(CampaignData.HKS08.Roads, States.MapHeight()*States.MapWidth())
	aHouse := States.PlayerGetAllHouses(0);
	aUnit:= States.PlayerGetAllUnits(0)
	aGroup:= States.PlayerGetAllGroups(0)
	SetLength(CampaignData.HKS08.Houses, Length(aHouse)+1);
	SetLength(CampaignData.HKS08.Units, Length(aUnit)+1);
	SetLength(CampaignData.HKS08.Groups, Length(aGroup)+1);
	for H := 0 to Length(aHouse) -1 do begin
		CampaignData.HKS08.Houses[H][0] := States.HouseType(aHouse[H]); 
		CampaignData.HKS08.Houses[H][1] := States.HousePositionX(aHouse[H]);
		CampaignData.HKS08.Houses[H][2] := States.HousePositionY(aHouse[H]);
		CampaignData.HKS08.Houses[H][3] := States.HouseDamage(aHouse[H]);
		for M := 4 to 31 do
			CampaignData.HKS08.Houses[H][M] := States.HouseResourceAmount(aHouse[H], M-4);
			
		For Back := 0 to 20 do begin
			For Front := 0 to 20 do begin
				If States.IsRoadAt(0,States.HousePositionX(aHouse[H])-10+Back,States.HousePositionY(aHouse[H])-10+Front) then begin 
					CampaignData.HKS08.Roads[R][0] := 0;
					CampaignData.HKS08.Roads[R][1] := States.HousePositionX(aHouse[H])-10+Back;
					CampaignData.HKS08.Roads[R][2] := States.HousePositionY(aHouse[H])-10+Front;
					CampaignData.HKS08.Roads[R][3] := 0;
					R:=R+1
				end	else
				If States.IsFieldAt(0,States.HousePositionX(aHouse[H])-10+Back,States.HousePositionY(aHouse[H])-10+Front) then begin 		
					CampaignData.HKS08.Roads[R][0] := 0;
					CampaignData.HKS08.Roads[R][1] := States.HousePositionX(aHouse[H])-10+Back;
					CampaignData.HKS08.Roads[R][2] := States.HousePositionY(aHouse[H])-10+Front;
					CampaignData.HKS08.Roads[R][3] := 1;
					R:=R+1
				end	else
				If States.IsWinefieldAt(0,States.HousePositionX(aHouse[H])-10+Back,States.HousePositionY(aHouse[H])-10+Front) then begin 			
					CampaignData.HKS08.Roads[R][0] := 0;
					CampaignData.HKS08.Roads[R][1] := States.HousePositionX(aHouse[H])-10+Back;
					CampaignData.HKS08.Roads[R][2] := States.HousePositionY(aHouse[H])-10+Front;
					CampaignData.HKS08.Roads[R][3] := 2;
					R:=R+1
				end;
			end;
		end;
	end;
	For UNITSL := 0 to Length(aUnit)-1 do begin
		If (States.UnitType(aUnit[UNITSL]) = 0) or (States.UnitType(aUnit[UNITSL]) = 9) then begin
			CampaignData.HKS08.Units[UNITSL][0] := States.UnitType(aUnit[UNITSL]);
			CampaignData.HKS08.Units[UNITSL][1] := States.UnitPositionX(aUnit[UNITSL]);
			CampaignData.HKS08.Units[UNITSL][2] := States.UnitPositionY(aUnit[UNITSL]);
			CampaignData.HKS08.Units[UNITSL][3] := States.UnitDirection(aUnit[UNITSL]);
		end;
	end;
	For GROUPSL := 0 to Length(aGroup)-1 do begin
		CampaignData.HKS08.Groups[GROUPSL][0] := States.UnitType(States.GroupMember(aGroup[GROUPSL],0));
		CampaignData.HKS08.Groups[GROUPSL][1] := States.UnitPositionX(States.GroupMember(aGroup[GROUPSL],0));
		CampaignData.HKS08.Groups[GROUPSL][2] := States.UnitPositionY(States.GroupMember(aGroup[GROUPSL],0));
		CampaignData.HKS08.Groups[GROUPSL][3] := States.UnitDirection(States.GroupMember(aGroup[GROUPSL],0));
		CampaignData.HKS08.Groups[GROUPSL][4] := States.GroupMemberCount(aGroup[GROUPSL]);
		CampaignData.HKS08.Groups[GROUPSL][5] := States.GroupColumnCount(aGroup[GROUPSL]);
	end;
	SetLength(CampaignData.HKS08.Roads, R); //reduce arrays size to minimum possible without deleting data
end;