

{$EVENT evtTick:DifficultyOnTick}
{$EVENT evtMissionStart:DifficultyOnMissionStart}
var Stats:array[1..4] of array of array[0..4] of Integer;

const 
	iPlayer=1;
procedure DifficultyOnMissionStart();
Var LE,Player:Integer;
	Army:Array Of Integer;
begin
	for Player := 1to 4 do begin
		Army:=States.PlayerGetAllGroups(Player)
		SetLength(Stats[Player],length(Army));
		for LE:= 0 to length(Army)-1 do begin
			Stats[Player][LE][0]:= States.UnitType(States.GroupMember(Army[LE],0));
			Stats[Player][LE][1]:= States.UnitPositionX(States.GroupMember(Army[LE],0));
			Stats[Player][LE][2]:= States.UnitPositionY(States.GroupMember(Army[LE],0));
			Stats[Player][LE][3]:= States.UnitDirection(States.GroupMember(Army[LE],0));
			Stats[Player][LE][4]:= States.GroupColumnCount(Army[LE]);
			Actions.GroupKillAll(Army[LE],true);
		end;
	end;
end;
procedure DifficultyOnTick();
var LE1,Player2:Integer;
	Difficulty:TKMMissionDifficulty;
	Count:array of Integer;
	dMod:byte;
begin
	for Player2 := 1to 4 do begin
		Count := [40,35,30,25,20,10,5]
		dMod:= byte(States.MissionDifficulty)-1
		If States.GameTime = 2 then begin
			for LE1:= 0 to length(Stats[Player2])-1 do begin
				Actions.GiveGroup(Player2,Stats[Player2][LE1][0],Stats[Player2][LE1][1],Stats[Player2][LE1][2],Stats[Player2][LE1][3],Count[dMod],Stats[Player2][LE1][4]);
			end;
		end;
	end;
end;