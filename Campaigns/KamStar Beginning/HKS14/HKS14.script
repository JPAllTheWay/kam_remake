 {$I difficulty.script}
 {$I Language.script}
var bohater,n1:Integer;
{$I Statek.script}
Procedure OnMarketTrade(aMarket: Integer; aFrom: Integer;  aTo: Integer);
begin
if (States.HouseOwner(aMarket) = 0) and (aFrom = 27) and not (aTo = 1) then
	Actions.GiveWares(0,aFrom,1);
end;
Procedure OnHouseDestroyed(aHouse: Integer; aDestroyerIndex: Integer);
begin
if (aDestroyerIndex = 0) and (States.HouseOwner(aHouse) > 0) then
	Actions.GiveWares(aDestroyerIndex,1,1);
	Actions.GiveWares(aDestroyerIndex,2,1);
end;

  procedure AutoFeed;
    var K, I: Integer;
      UnitsToFeed: array of Integer;
        begin
          for I := 1 to 3 do begin
           UnitsToFeed := States.PlayerGetAllUnits(I);
            for K := 0 to length(UnitsToFeed) - 1 do begin
             Actions.UnitHungerSet(UnitsToFeed[K], States.UnitMaxHunger);
           end;
         end; 
       end;
	   
Procedure OnBeacon(Player:Integer; X,Y:Word);
begin
	IF (X = States.UnitPositionX(bohater))and(Y = States.UnitPositionY(bohater)) then n1:=n1+1;
	If n1 = 8 then Actions.PlayerWin([0],true);
end;
procedure OnTick;
begin
	if States.GameTime = 1 then begin
		Actions.OverlayTextSetFormatted(-1, '', []);
		Actions.OverlayTextAppendFormatted(-1, '<$0>', []);
		bohater := States.UnitAt(4,127)
	end;
	if States.GameTime = 150 then begin
		Actions.OverlayTextSetFormatted(-1, '', []);
		Actions.OverlayTextAppendFormatted(-1, '<$1>', []);
		Actions.OverlayTextAppend(-1, '|');
		Actions.OverlayTextAppendFormatted(-1, '<$4>', []); end;
	if States.GameTime = 500 then begin
		Actions.OverlayTextSetFormatted(-1, '', []);
		Actions.OverlayTextAppendFormatted(-1, '<$2>', []); end;
	if States.GameTime = 700 then
		Actions.OverlayTextSetFormatted(-1, '', []);
	if States.GameTime = 72000 then	begin
		Actions.GiveGroup (4, 26, 243, 116, 6, 50, 10 )
		Actions.OverlayTextSetFormatted(-1, '', []);
		Actions.OverlayTextAppendFormatted(-1, '<$3>', []);
	end;
	if States.GameTime = 72400 then
		Actions.OverlayTextSetFormatted(-1, '', []);
	if States.GameTime MOD 9000 = 0 then
		Autofeed;
	if States.UnitDead(bohater) then
		Actions.PlayerDefeat(0);
end;


procedure OnMissionStart();
var 
	G,G2,Y: Integer;
begin
	if (Length(CampaignData.HKS12.Groups)=0) or (Length(CampaignData.HKS13.Groups)=0) then begin Actions.GiveGroup(0,22,8 ,120,4,18,6); Actions.GiveGroup(0,21,16 ,120,4,12,6);
	end else begin
		for G := 0 to Length(CampaignData.HKS12.Groups)-1 do begin
			Actions.GiveGroup(0,CampaignData.HKS12.Groups[G][0], 8,91+Y, 4,CampaignData.HKS12.Groups[G][1],CampaignData.HKS12.Groups[G][1]/5)
			IF Y=0 then Y:=1 else Y:=Y+6;
		end;	
		Y:=1;
		for G2 := 0 to Length(CampaignData.HKS13.Groups)-1 do begin
			Actions.GiveGroup(0,CampaignData.HKS13.Groups[G2][0], 20,91+Y, 4,CampaignData.HKS13.Groups[G2][1],CampaignData.HKS13.Groups[G2][1]/5)
			Y:=Y+6;
		end;
	end;
	Actions.HouseAddWaresTo(States.HouseAt(38,144),4,5);
end;

procedure OnPlayerVictory(aIndex: Integer);
var
	aGroup: array of Integer;
	GROUPSL: Integer;
begin
	aGroup:= States.PlayerGetAllGroups(0)
	SetLength(CampaignData.HKS14.Groups, Length(aGroup));
	For GROUPSL := 0 to Length(aGroup)-1 do begin
		If States.GroupMemberCount(aGroup[GROUPSL]) > 1 then begin
		CampaignData.HKS14.Groups[GROUPSL][0] := States.UnitType(States.GroupMember(aGroup[GROUPSL],0));
		CampaignData.HKS14.Groups[GROUPSL][1] := States.UnitPositionX(States.GroupMember(aGroup[GROUPSL],0));
		CampaignData.HKS14.Groups[GROUPSL][2] := States.UnitPositionY(States.GroupMember(aGroup[GROUPSL],0));
		CampaignData.HKS14.Groups[GROUPSL][3] := States.UnitDirection(States.GroupMember(aGroup[GROUPSL],0));
		CampaignData.HKS14.Groups[GROUPSL][4] := States.GroupMemberCount(aGroup[GROUPSL]);
		CampaignData.HKS14.Groups[GROUPSL][5] := States.GroupColumnCount(aGroup[GROUPSL]);
		end;
	end;
end;