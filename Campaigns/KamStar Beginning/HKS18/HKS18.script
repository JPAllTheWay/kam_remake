{$I Language.script}
var Tyrio,n1:Integer;
{$I Statek.script}
Procedure OnMarketTrade(aMarket: Integer; aFrom: Integer;  aTo: Integer);
begin
if (States.HouseOwner(aMarket) = 0) and (aFrom = 27) and not (aTo = 1) then
	Actions.GiveWares(0,aFrom,1);
end;
Procedure OnHouseDestroyed(aHouse: Integer; aDestroyerIndex: Integer);
begin
if (aDestroyerIndex = 0) and (States.HouseOwner(aHouse) > 0) then
	Actions.GiveWares(aDestroyerIndex,1,States.KaMRandomI(2)+1);
	Actions.GiveWares(aDestroyerIndex,2,States.KaMRandomI(2)+1);
end;
  procedure AutoFeed;
    var K, I: Integer;
      UnitsToFeed: array of Integer;
        begin
          for I := 1 to 2 do begin
           UnitsToFeed := States.PlayerGetAllGroups(I);
            for K := 0 to length(UnitsToFeed) - 1 do begin
             Actions.GroupHungerSet(UnitsToFeed[K], States.UnitMaxHunger);
           end;
         end; 
       end;
Procedure OnBeacon(Player:Integer; X,Y:Word);
begin
	IF (X = States.UnitPositionX(Tyrio))and(Y = States.UnitPositionY(Tyrio)) then n1:=n1+1;
	If n1 = 8 then Actions.PlayerWin([0],true);
end;
procedure OnTick;
begin
	if States.GameTime = 1 then  begin 
		Actions.OverlayTextSetFormatted(-1, '', []);
		Actions.OverlayTextAppendFormatted(-1, '<$0>', []); 
		Tyrio := States.GroupAt(18,88) end;
	if States.GameTime = 300 then
		Actions.OverlayTextSetFormatted(-1, '', []);
	if States.GameTime MOD 9000 = 0 then
		Autofeed;
	if States.GroupDead(Tyrio) then
		Actions.PlayerDefeat(0);
end;

procedure OnMissionStart();
var 
	G,X,II,Y,Po: Integer;
	Count:array of Integer;
	dMod:byte;
begin
	if (Length(CampaignData.HKS14.Groups)=0) then begin Actions.GiveGroup(0,22,24 ,93,1,18,6); Actions.GiveGroup(0,21,12 ,78,0,12,6); Actions.GiveGroup(0,21,5 ,85,0,12,6);
	end else begin
		for G := 0 to Length(CampaignData.HKS14.Groups)-1 do begin
			If CampaignData.HKS14.Groups[G][4] = 0 then begin end else begin
				Actions.GiveGroup(0,CampaignData.HKS14.Groups[G][0], 7+X,61+Y, 2,CampaignData.HKS14.Groups[G][4],CampaignData.HKS14.Groups[G][5])
				IF II = 4 then X:=X+5 else Y:=Y+6;
				If II = 4 then II:=0;
				II:=II+1;
			end;
		end;
	end;	
	Count:= [1,3,4,5,10,12,20];
	dMod:= byte(States.MissionDifficulty)-1
	Actions.AIRecruitLimit(1,Count[dMod]);
	Actions.AIRecruitLimit(2,Count[dMod]);
	Count:= [7,6,5,4,3,2,1];
	Actions.AIAutoAttackRange(1,Count[dMod]);
	Po:= States.StatArmyCount(0);
	Actions.GiveWares(0,8,Po/2)
	Actions.GiveWares(0,10,Po/2)
	Actions.GiveWares(0,27,Po/2)
end;

procedure OnPlayerVictory(aIndex: Integer);
var
	aGroup: array of Integer;
	GROUPSL: Integer;
begin
	aGroup:= States.PlayerGetAllGroups(0)
	SetLength(CampaignData.HKS18.Groups, Length(aGroup));
	For GROUPSL := 0 to Length(aGroup)-1 do begin
		If aGroup[GROUPSL] = Tyrio then begin
		CampaignData.HKS18.Groups[GROUPSL][0] := 0;
		CampaignData.HKS18.Groups[GROUPSL][1] :=0;
		CampaignData.HKS18.Groups[GROUPSL][2] := 0;
		CampaignData.HKS18.Groups[GROUPSL][3] := 0;
		CampaignData.HKS18.Groups[GROUPSL][4] := 0;
		CampaignData.HKS18.Groups[GROUPSL][5] := 0;
		end else begin
		CampaignData.HKS18.Groups[GROUPSL][0] := States.UnitType(States.GroupMember(aGroup[GROUPSL],0));
		CampaignData.HKS18.Groups[GROUPSL][1] := States.UnitPositionX(States.GroupMember(aGroup[GROUPSL],0));
		CampaignData.HKS18.Groups[GROUPSL][2] := States.UnitPositionY(States.GroupMember(aGroup[GROUPSL],0));
		CampaignData.HKS18.Groups[GROUPSL][3] := States.UnitDirection(States.GroupMember(aGroup[GROUPSL],0));
		CampaignData.HKS18.Groups[GROUPSL][4] := States.GroupMemberCount(aGroup[GROUPSL]);
		CampaignData.HKS18.Groups[GROUPSL][5] := States.GroupColumnCount(aGroup[GROUPSL]);
		end;
	end;
end;