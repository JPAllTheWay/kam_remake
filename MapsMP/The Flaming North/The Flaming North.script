const
  AUTOFEED_TIME = 6000;
  DEPOSITS_TIME = 600;
  AMBIENT_TIME = 250;
  BT = 3;
  FISH_TIME = 4500;
  ARMY_TYPE_TIME = 75;
  WEAPON_TIME = 36000;


var
  Wolves: array of Integer;
  SoundAllowed: array[0..1] of Boolean;
  Bs: Boolean;
  TH3, TH4: Integer;
  Equipped: array[2..9] of Integer;
  CurrentType: array[2..9] of array [0..4] of Integer;


procedure FindWolves;
var
  aX, aY, W: Integer;
begin
  for aX := 1 to States.MapWidth - 1 do
    for aY := 1 to States.MapHeight - 1 do
    begin
      W := States.UnitAt(aX, aY);
      if W > 0 then
        if States.UnitType(W) = 30 then
        begin
          SetLength(Wolves, Length(Wolves) + 1);
          if Length(Wolves) > 0 then
            Wolves[Length(Wolves) - 1] := W;
        end;
    end;
end;


procedure SetWareDistribution;
var
  I: Integer;
begin
  for I := 2 to 9 do
  begin
    Actions.PlayerWareDistribution(I, 6, 2, 5);
    Actions.PlayerWareDistribution(I, 6, 10, 5);
    Actions.PlayerWareDistribution(I, 5, 1, 5);
    Actions.PlayerWareDistribution(I, 5, 15, 5);
    Actions.PlayerWareDistribution(I, 5, 2, 5);
    Actions.PlayerWareDistribution(I, 5, 10, 5);
    Actions.PlayerWareDistribution(I, 2, 20, 5);
    Actions.PlayerWareDistribution(I, 2, 19, 5);
    Actions.PlayerWareDistribution(I, 9, 22, 5);
    Actions.PlayerWareDistribution(I, 9, 16, 5);
    Actions.PlayerWareDistribution(I, 9, 12, 5);
  end;
end;


procedure BlockWares;
var
  H: array of Integer;
  I, K: Integer;
begin
  for I := 2 to 9 do
  begin
    H := States.PlayerGetAllHouses(I);

    if Length(H) <= 0 then
      Exit;

    for K := Low(H) to High(H) do
      if States.HouseType(H[K]) = 11 then
      begin
        Actions.HouseWareBlock(H[K], 0, True);
        Actions.HouseWareBlock(H[K], 3, True);
        Actions.HouseWareBlock(H[K], 4, True);
        Actions.HouseWareBlock(H[K], 5, True);
        Actions.HouseWareBlock(H[K], 6, True);
        Actions.HouseWareBlock(H[K], 9, True);
        Actions.HouseWareBlock(H[K], 11, True);
        Actions.HouseWareBlock(H[K], 14, True);
        Actions.HouseWareBlock(H[K], 15, True);
      end;
  end;
end;


procedure SetWeaponsOrder;
var
  H: array of Integer;
  I, K: Integer;
begin
  for I := 2 to 9 do
  begin
    H := States.PlayerGetAllHouses(I);

    if Length(H) <= 0 then
      Exit;

    for K := Low(H) to High(H) do
    begin
      if States.HouseType(H[K]) = 2 then
      begin
        Actions.HouseWeaponsOrderSet(H[K], 21, 999);
        Actions.HouseWeaponsOrderSet(H[K], 23, 999);
        Actions.HouseWeaponsOrderSet(H[K], 25, 999);
      end;
      if States.HouseType(H[K]) = 10 then
      begin
        Actions.HouseWeaponsOrderSet(H[K], 17, 999);
        Actions.HouseWeaponsOrderSet(H[K], 19, 999);
      end;
    end;
  end;
end;


{$COMMAND sound: TurnSoundOnOff}


procedure TurnSoundOnOff(P, Value: Integer);
var
  aValue: Integer;
begin
  if not Utils.InRangeI(P, 0, 1) then
    Exit;
  aValue := Utils.EnsureRangeI(Value, 0, 1);
  SoundAllowed[P] := Boolean(aValue);
end;


function GroupsFormation(P, GT: Integer): Integer;
var
  aCount, aColumns: Integer;
begin
  States.AIGroupsFormationGet(P, GT, aCount, aColumns);
  Result := aCount;
end;


function DefenceSquadsCount(P, aGT: Integer): Integer;
var
  I, aX, aY: Integer;
  GT, DT: Byte; 
  R: Word;
begin
  Result := 0;
  if States.StatAIDefencePositionsCount(P) > 0 then
    for I := 0 to States.StatAIDefencePositionsCount(P) - 1 do
    begin
      States.AIDefencePositionGet(P, I, aX, aY, GT, R, DT);
      if (DT = 0)
      and (GT = aGT) then
        Result := Result + 1;
    end;
end;


function SoldiersForDefence(P: Integer): Integer;
var
  I: Integer;
begin
  Result := 0;
  for I := 0 to 3 do
    Result := Result + DefenceSquadsCount(P, I) * GroupsFormation(P, I);
end;


function AttackAmount(P: Integer): Integer;
begin
  case P of
    2,7,8,9: Result := 35 + 5 * (Byte(States.MissionDifficulty) - 3);
    3,4: begin
           case States.MissionDifficulty of
             mdEasy1:  Result := 28;
             mdNormal: Result := 32;
             mdHard1:  Result := 36;
             mdHard2:  Result := 42;
             mdHard3:  Result := 50;
           end;
         end
    else     Result := 0;
  end;
end;


function SoldiersToEquip(P: Integer): Integer;
begin
  Result := SoldiersForDefence(P) + AttackAmount(P) - States.StatArmyCount(P) - States.StatUnitTypeCount(P, 13) + States.StatHouseTypeCount(P, 17) + 5;
  if Utils.InRangeI(P, 3, 4) then
    Result := Result - 5 - Round(0.55 * AttackAmount(P));
end;


function FirstAttackTimer(P: Integer): Integer;
begin
  case States.MissionDifficulty of
    mdEasy1:
      case P of
        8,9: Result := 42000;
        3,4: Result := 60000;
        2,7: Result := 48000
        else Result := 33000;
      end;

    mdNormal:
      case P of
        8,9: Result := 39000;
        3,4: Result := 57000;
        2,7: Result := 43200
        else Result := 33000;
      end;

    mdHard1:
      case P of
        8,9: Result := 37500;
        3,4: Result := 54000;
        2,7: Result := 40500
        else Result := 33000;
      end;

    mdHard2, mdHard3:
      case P of
        8,9: Result := 36000;
        3,4: Result := 51000;
        2,7: Result := 39300
        else Result := 33000;
      end;
  end;
end;


procedure UpdateAIEquipRates;
var
  Pos: TKMPoint;
  I: Integer;
begin

  Pos.X := 0;
  Pos.Y := 0;

  for I := 2 to 9 do
    Actions.AIAttackRemoveAll(I);

  case States.MissionDifficulty of

    mdEasy1: begin
               Actions.AIEquipRate(2, 0, 320);
               Actions.AIEquipRate(2, 1, 320);
               Actions.AIEquipRate(3, 0, 380);
               Actions.AIEquipRate(3, 1, 380);
               Actions.AIEquipRate(4, 0, 380);
               Actions.AIEquipRate(4, 1, 380);
               Actions.AIEquipRate(5, 0, 260);
               Actions.AIEquipRate(5, 1, 260);
               Actions.AIEquipRate(6, 0, 260);
               Actions.AIEquipRate(6, 1, 260);
               Actions.AIEquipRate(7, 0, 320);
               Actions.AIEquipRate(7, 1, 320);
               Actions.AIEquipRate(8, 0, 320);
               Actions.AIEquipRate(8, 1, 320);
               Actions.AIEquipRate(9, 0, 320);
               Actions.AIEquipRate(9, 1, 320);
               Actions.AIAttackAdd(8, True, 42000, 35, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(9, True, 42000, 35, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(2, True, 48000, 35, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(7, True, 48000, 35, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(3, True, 60000, 28, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(4, True, 60000, 28, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
             end;

    mdNormal: begin
               Actions.AIEquipRate(2, 0, 290);
               Actions.AIEquipRate(2, 1, 290);
               Actions.AIEquipRate(3, 0, 350);
               Actions.AIEquipRate(3, 1, 350);
               Actions.AIEquipRate(4, 0, 350);
               Actions.AIEquipRate(4, 1, 350);
               Actions.AIEquipRate(5, 0, 225);
               Actions.AIEquipRate(5, 1, 225);
               Actions.AIEquipRate(6, 0, 225);
               Actions.AIEquipRate(6, 1, 225);
               Actions.AIEquipRate(7, 0, 290);
               Actions.AIEquipRate(7, 1, 290);
               Actions.AIEquipRate(8, 0, 290);
               Actions.AIEquipRate(8, 1, 290);
               Actions.AIEquipRate(9, 0, 290);
               Actions.AIEquipRate(9, 1, 290);
               Actions.AIAttackAdd(8, True, 39000, 40, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(9, True, 39000, 40, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(2, True, 43200, 40, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(7, True, 43200, 40, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(3, True, 57000, 32, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(4, True, 57000, 32, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
              end;

    mdHard1: begin
               Actions.AIEquipRate(2, 0, 260);
               Actions.AIEquipRate(2, 1, 260);
               Actions.AIEquipRate(3, 0, 320);
               Actions.AIEquipRate(3, 1, 320);
               Actions.AIEquipRate(4, 0, 320);
               Actions.AIEquipRate(4, 1, 320);
               Actions.AIEquipRate(5, 0, 200);
               Actions.AIEquipRate(5, 1, 200);
               Actions.AIEquipRate(6, 0, 200);
               Actions.AIEquipRate(6, 1, 200);
               Actions.AIEquipRate(7, 0, 260);
               Actions.AIEquipRate(7, 1, 260);
               Actions.AIEquipRate(8, 0, 260);
               Actions.AIEquipRate(8, 1, 260);
               Actions.AIEquipRate(9, 0, 260);
               Actions.AIEquipRate(9, 1, 260);
               Actions.AIAttackAdd(8, True, 37500, 45, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(9, True, 37500, 45, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(2, True, 40500, 45, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(7, True, 40500, 45, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(3, True, 54000, 36, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(4, True, 54000, 36, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
             end;

    mdHard2: begin
               Actions.AIEquipRate(2, 0, 230);
               Actions.AIEquipRate(2, 1, 230);
               Actions.AIEquipRate(3, 0, 290);
               Actions.AIEquipRate(3, 1, 290);
               Actions.AIEquipRate(4, 0, 290);
               Actions.AIEquipRate(4, 1, 290);
               Actions.AIEquipRate(5, 0, 175);
               Actions.AIEquipRate(5, 1, 175);
               Actions.AIEquipRate(6, 0, 175);
               Actions.AIEquipRate(6, 1, 175);
               Actions.AIEquipRate(7, 0, 230);
               Actions.AIEquipRate(7, 1, 230);
               Actions.AIEquipRate(8, 0, 230);
               Actions.AIEquipRate(8, 1, 230);
               Actions.AIEquipRate(9, 0, 230);
               Actions.AIEquipRate(9, 1, 230);
               Actions.AIAttackAdd(8, True, 36000, 50, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(9, True, 36000, 50, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(2, True, 39300, 50, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(7, True, 39300, 50, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(3, True, 51000, 42, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(4, True, 51000, 42, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
             end;

    mdHard3: begin
               Actions.AIEquipRate(2, 0, 200);
               Actions.AIEquipRate(2, 1, 200);
               Actions.AIEquipRate(3, 0, 260);
               Actions.AIEquipRate(3, 1, 260);
               Actions.AIEquipRate(4, 0, 260);
               Actions.AIEquipRate(4, 1, 260);
               Actions.AIEquipRate(5, 0, 150);
               Actions.AIEquipRate(5, 1, 150);
               Actions.AIEquipRate(6, 0, 150);
               Actions.AIEquipRate(6, 1, 150);
               Actions.AIEquipRate(7, 0, 200);
               Actions.AIEquipRate(7, 1, 200);
               Actions.AIEquipRate(8, 0, 200);
               Actions.AIEquipRate(8, 1, 200);
               Actions.AIEquipRate(9, 0, 200);
               Actions.AIEquipRate(9, 1, 200);
               Actions.AIAttackAdd(8, True, 36000, 55, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(9, True, 36000, 55, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(2, True, 39300, 55, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(7, True, 39300, 55, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(3, True, 51000, 50, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
               Actions.AIAttackAdd(4, True, 51000, 50, 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
             end;

  end;

  for I := 2 to 9 do
    Actions.AIRecruitDelay(I, Utils.MaxI(FirstAttackTimer(I) - SoldiersToEquip(I) * States.AIEquipRate(I, 1), 0));

end;


function AttackFrequency(P: Integer): Integer;
begin
  Result := AttackAmount(P) * States.AIEquipRate(P, 1);
end;


function AttackTime(P, ID: Integer): Integer;
begin
  Result := FirstAttackTimer(P) + AttackFrequency(P) * (ID - 1);
end;


function BarbarianRage: Single; {old values 0.15 0.3 0.45 0.5 0.6 - seem too high}
begin
  case States.MissionDifficulty of
    mdEasy1:  Result := 0.1;
    mdNormal: Result := 0.15;
    mdHard1:  Result := 0.25;
    mdHard2:  Result := 0.35;
    mdHard3:  Result := 0.45;
  end;
end;


function FindMeleeGroup(P: Integer): Integer;
var
  Groups: array of Integer;
  I, aY, aCount: Integer;
begin
  Result := -1;
  Groups := States.PlayerGetAllGroups(P);
  if Length(Groups) <= 0 then
    Exit;
  for I := 0 to Length(Groups) - 1 do
  begin
    aY := States.UnitPositionY(States.GroupMember(Groups[I], 0));
    aCount := States.GroupMemberCount(Groups[I]);
    if (aY < 70)
    and (aCount < GroupsFormation(P, 0))
    and (aCount > 1) then
      Result := Groups[I];
  end;
end;


function BarbarianRate: Integer;
begin
  Result := 350 - 30 * (Byte(States.MissionDifficulty) - 3);
end;


procedure CreateBarbarian;
var
  G31, G41, G32, G42: Integer;
begin
  G31 := FindMeleeGroup(3);
  G41 := FindMeleeGroup(4);

  if (States.GameTime > States.AIRecruitDelay(3))
  or (States.StatUnitTypeCount(3, 13) > States.StatHouseTypeCount(3, 17)) then
    if (G31 > 0)
    and (Length(States.PlayerGetAllGroups(3)) < States.StatAIDefencePositionsCount(3))
    and (not States.HouseDestroyed(TH3))
    and (Utils.InRangeI(States.GroupMemberCount(G31), 2, GroupsFormation(3, 0) - 1)) then
    begin
      G32 := Actions.HouseTownHallEquip(TH3, 23, 1);
      Actions.GroupHungerSet(G32, States.UnitMaxHunger);
      Actions.GroupOrderLink(G32, G31);
    end;

  if (States.GameTime > States.AIRecruitDelay(4))
  or (States.StatUnitTypeCount(4, 13) > States.StatHouseTypeCount(4, 17)) then
    if (G41 > 0)
    and (Length(States.PlayerGetAllGroups(4)) < States.StatAIDefencePositionsCount(4))
    and (not States.HouseDestroyed(TH4))
    and (Utils.InRangeI(States.GroupMemberCount(G41), 2, GroupsFormation(4, 0) - 1)) then
    begin
      G42 := Actions.HouseTownHallEquip(TH4, 23, 1);
      Actions.GroupHungerSet(G42, States.UnitMaxHunger);
      Actions.GroupOrderLink(G42, G41);
    end;

end;


procedure UpdatePlayers;
begin
  case States.MissionDifficulty of

    mdEasy1: begin

               if States.PlayerEnabled(0) then
               begin
                 Actions.GiveGroup(0, 20, 24, 129, 5, 8, 4);
                 Actions.GiveUnit(0, 0, 30, 125, 4);
                 Actions.GiveUnit(0, 9, 31, 125, 4);
                 Actions.GiveUnit(0, 0, 32, 125, 4);
               end;

               if States.PlayerEnabled(1) then
               begin
                 Actions.GiveGroup(1, 20, 110, 128, 5, 8, 4);
                 Actions.GiveUnit(1, 0, 112, 122, 4);
                 Actions.GiveUnit(1, 9, 113, 122, 4);
                 Actions.GiveUnit(1, 0, 114, 122, 4);
               end;

             end;

  end;
end;


procedure OnUnitWounded(aU, aAttacker: Integer);
begin
  if (States.UnitType(aU) = 23)
  and (Utils.InRangeI(States.UnitOwner(aU), 2, 9)) then
    if States.KaMRandom <= BarbarianRage then
      Actions.UnitHPChange(aU, 1 + States.KaMRandomI(2));
end;



function GroupTypeToRandomUnitType(aGroupType: Integer): Integer;
begin
  case aGroupType of
    0: case States.MissionDifficulty of
         mdEasy1:          Result := Utils.IfThenI(States.KaMRandom < 0.6, 15, 16);
         mdNormal:         Result := Utils.IfThenI(States.KaMRandom < 0.4, 15, 16);
         mdHard1:          Result := Utils.IfThenI(States.KaMRandom < 0.2, 15, 16);
         mdHard2, mdHard3: Result := 16;
       end;
    1: case States.MissionDifficulty of
         mdEasy1:          Result := Utils.IfThenI(States.KaMRandom < 0.6, 19, 20);
         mdNormal:         Result := Utils.IfThenI(States.KaMRandom < 0.4, 19, 20);
         mdHard1:          Result := Utils.IfThenI(States.KaMRandom < 0.2, 19, 20);
         mdHard2, mdHard3: Result := 20;
       end;
    2: case States.MissionDifficulty of
         mdEasy1:          Result := Utils.IfThenI(States.KaMRandom < 0.6, 17, 18);
         mdNormal:         Result := Utils.IfThenI(States.KaMRandom < 0.4, 17, 18);
         mdHard1:          Result := Utils.IfThenI(States.KaMRandom < 0.2, 17, 18);
         mdHard2, mdHard3: Result := 18;
       end;
    3: case States.MissionDifficulty of
         mdEasy1:          Result := Utils.IfThenI(States.KaMRandom < 0.6, 21, 22);
         mdNormal:         Result := Utils.IfThenI(States.KaMRandom < 0.4, 21, 22);
         mdHard1:          Result := Utils.IfThenI(States.KaMRandom < 0.2, 21, 22);
         mdHard2, mdHard3: Result := 22;
       end;
  end;
end;


procedure GiveRandomAIGroup(P, X, Y, D, aType: Integer);
var
  I, G1, G2, Count, Formation: Integer;
begin
  States.AIGroupsFormationGet(P, aType, Count, Formation);
  if Utils.InRangeI(P, 5, 6) then
    Count := Round(Count * Utils.MaxS(0.4, States.KaMRandom));
  G1 := Actions.GiveGroup(P, GroupTypeToRandomUnitType(aType), X, Y, D, 1, 1);
  for I := 0 to Utils.MaxI(1, Count - 2) do
  begin
    G2 := Actions.GiveGroup(P, GroupTypeToRandomUnitType(aType), X, Y, D, 1, 1);
    Actions.GroupOrderLink(G2, G1);
  end;
  Actions.GroupHungerSet(G1, States.UnitMaxHunger);
  Actions.GroupSetFormation(G1, Formation);
end;


procedure FillAIDefencePositions(P: Integer);
var
  I, aX, aY, aU, aUT: Integer;
  aGT, aDT: Byte;
  aR: Word;
begin
  for I := 0 to States.StatAIDefencePositionsCount(P) - 1 do
  begin
    States.AIDefencePositionGet(P, I, aX, aY, aGT, aR, aDT);
    if (aDT = 0) then
    begin
      aU := States.UnitAt(aX, aY);
      if aU > 0 then
        aUT := States.UnitType(aU);
      if (aU < 0)
      or ((aU > 0) and (aUT <> 23)) then
        GiveRandomAIGroup(P, aX, aY, 0, aGT);
    end;
  end;
end;


procedure GiveBarbs(P: Integer);
var
  I, aX, aY, aG: Integer;
  aGT, aDT: Byte;
  aR: Word;
begin
  for I := 0 to States.StatAIDefencePositionsCount(P) - 1 do
  begin
    States.AIDefencePositionGet(P, I, aX, aY, aGT, aR, aDT);
    if (aDT = 0)
    and (aGT = 0) then
    begin
      aG := Actions.GiveGroup(P, 23, aX, aY, 4, 12, Utils.IfThenI(P = 4, 3, 4));
      Actions.GroupHungerSet(aG, States.UnitMaxHunger);
    end;
  end;
end;


procedure InitTypes(P: Integer);
var
  K, RN1, RN2, RN3: Integer;
begin
  for K := 0 to 4 do
    CurrentType[P][K] := -1;

  case States.MissionDifficulty of

    mdEasy1: begin
               RN1 := States.KaMRandomI(5);
               CurrentType[P][RN1] := 1;
               while CurrentType[P][RN2] <> -1 do
                 RN2 := States.KaMRandomI(4);
               CurrentType[P][RN2] := 1;
               while CurrentType[P][RN3] <> -1 do
                 RN2 := States.KaMRandomI(4);
               CurrentType[P][RN3] := 1;
               for K := 0 to 4 do
                 if CurrentType[P][K] = -1 then
                   CurrentType[P][K] := 0;
             end;

    mdNormal: begin
                RN1 := States.KaMRandomI(5);
                CurrentType[P][RN1] := 1;
                while CurrentType[P][RN2] <> -1 do
                  RN2 := States.KaMRandomI(4);
                CurrentType[P][RN2] := 1;
                for K := 0 to 4 do
                  if CurrentType[P][K] = -1 then
                    CurrentType[P][K] := 0;
              end;

    mdHard1: begin
               RN1 := States.KaMRandomI(5);
               CurrentType[P][RN1] := 1;
               for K := 0 to 4 do
                 if CurrentType[P][K] = -1 then
                   CurrentType[P][K] := 0;
             end;

    mdHard2, mdHard3: Exit;

  end;

end;


procedure OnWarriorEquipped(aU, aG: Integer);
begin
  if (aU > 0)
  and (aG > 0) then
    if Utils.InRangeI(States.UnitOwner(aU), 2, 9) then
    begin
      if States.UnitType(aU) <> 23 then
        Equipped[States.UnitOwner(aU)] := Equipped[States.UnitOwner(aU)] + 1;
      if (Equipped[States.UnitOwner(aU)] > 4)
      and (Equipped[States.UnitOwner(aU)] mod 5 = 0) then
        InitTypes(States.UnitOwner(aU));
      Actions.UnitHungerSet(aU, States.UnitMaxHunger);
    end;
end;


procedure ChangeArmyType(P: Integer);
var
  I, CN: Integer;
begin
  CN := Equipped[P] mod 5;
  case CurrentType[P][CN] of
    0: for I := 15 to 22 do
         Actions.UnitBlock(P, I, I mod 2 <> 0);
    1: for I := 15 to 22 do
         Actions.UnitBlock(P, I, I mod 2 = 0);
  end;
end;


procedure OnMissionStart;
var
  I: Integer;
begin

  Actions.PlayWAVAtLocationLooped(-1, 'Lava 1', 2.5, 32, 24, 62);
  Actions.PlayWAVAtLocationLooped(-1, 'Lava 1', 2.5, 40, 60, 58);
  Actions.PlayWAVAtLocationLooped(-1, 'Lava 1', 2.5, 40, 90, 61);
  Actions.PlayWAVAtLocationLooped(-1, 'Lava 1', 2.5, 40, 106, 42);
  Actions.PlayWAVAtLocationLooped(-1, 'Lava 1', 2.5, 32, 113, 57);
  Actions.PlayWAVAtLocationLooped(-1, 'Lava 1', 1.5, 40, 122, 86);
  Actions.PlayWAVAtLocationLooped(-1, 'Lava 1', 1.5, 40, 139, 90);
  Actions.PlayWAVAtLocationLooped(-1, 'Lava 1', 2.5, 40, 133, 66);
  Actions.PlayWAVAtLocationLooped(-1, 'Lava 1', 2.5, 32, 117, 11);
  Actions.PlayWAVAtLocationLooped(-1, 'Lava 1', 2.5, 40, 140, 11);
  Actions.PlayWAVAtLocationLooped(-1, 'Lava 1', 2.5, 40, 136, 34);
  Actions.PlayWAVAtLocationLooped(-1, 'Waterfall Creek', 2.5, 32, 156, 119);

  for I := 3 to 4 do
    GiveBarbs(I);

  for I := 2 to 9 do
  begin
    FillAIDefencePositions(I);
    InitTypes(I);
  end;

  SetWareDistribution;

  BlockWares;

  UpdateAIEquipRates;

  SetWeaponsOrder;

  UpdatePlayers;

  FindWolves;

  for I := 0 to 1 do
    SoundAllowed[I] := True;

  Bs := True;

  Actions.ShowMsg(-1, '<$1>');

  TH3 := States.HouseAt(110, 49);
  TH4 := States.HouseAt(15, 45);

  for I := 2 to 9 do
    Equipped[I] := 0;

  Actions.HouseTownHallMaxGold(TH3, 999);
  Actions.HouseTownHallMaxGold(TH4, 999);

end;


procedure AutoFeed(P: Integer);
var
  K: Integer;
  UnitsToFeed: array of Integer;
begin
  UnitsToFeed := States.PlayerGetAllUnits(P);
  if Length(UnitsToFeed) <= 0 then
    Exit;
  for K := Low(UnitsToFeed) to High(UnitsToFeed) do
    Actions.UnitHungerSet(UnitsToFeed[K], States.UnitMaxHunger);
end;


procedure UpdateDeposits;
begin
  Actions.MapTilesArraySetS(['4, 2, 152, -1, -1, -1', '4, 3, 152, -1, -1, -1', '5, 1, 152, -1, -1, -1', '5, 2, 152, -1, -1, -1', '5, 3, 152, -1, -1, -1', '5, 4, 152, -1, -1, -1', '5, 5, 152, -1, -1, -1', '5, 6, 152, -1, -1, -1', '5, 7, 153, -1, -1, -1', '5, 8, 152, -1, -1, -1', '6, 1, 153, -1, -1, -1', '6, 2, 152, -1, -1, -1', '6, 3, 152, -1, -1, -1', '6, 4, 152, -1, -1, -1', '6, 5, 153, -1, -1, -1', '6, 6, 153, -1, -1, -1', '6, 7, 153, -1, -1, -1', '6, 8, 152, -1, -1, -1', '6, 9, 152, -1, -1, -1', '6, 10, 152, -1, -1, -1', '6, 11, 152, -1, -1, -1', '7, 1, 152, -1, -1, -1', '7, 2, 153, -1, -1, -1', '7, 3, 153, -1, -1, -1', '7, 4, 153, -1, -1, -1', '7, 5, 153, -1, -1, -1', '7, 6, 154, -1, -1, -1', '7, 7, 154, -1, -1, -1', '7, 8, 154, -1, -1, -1', '7, 9, 153, -1, -1, -1', '7, 10, 153, -1, -1, -1', '7, 11, 152, -1, -1, -1', '7, 12, 152, -1, -1, -1', '7, 13, 152, -1, -1, -1', '7, 14, 152, -1, -1, -1', '8, 1, 152, -1, -1, -1', '8, 2, 152, -1, -1, -1', '8, 3, 152, -1, -1, -1', '8, 4, 152, -1, -1, -1', '8, 5, 153, -1, -1, -1', '8, 6, 154, -1, -1, -1', '8, 7, 154, -1, -1, -1', '8, 8, 154, -1, -1, -1', '8, 9, 154, -1, -1, -1', '8, 10, 154, -1, -1, -1', '8, 11, 153, -1, -1, -1', '8, 12, 153, -1, -1, -1', '8, 13, 152, -1, -1, -1', '8, 14, 152, -1, -1, -1', '8, 15, 152, -1, -1, -1', '8, 16, 152, -1, -1, -1', '8, 17, 152, -1, -1, -1', '8, 18, 152, -1, -1, -1', '9, 1, 152, -1, -1, -1', '9, 2, 152, -1, -1, -1', '9, 3, 152, -1, -1, -1', '9, 4, 152, -1, -1, -1', '9, 5, 152, -1, -1, -1', '9, 6, 153, -1, -1, -1', '9, 7, 154, -1, -1, -1', '9, 8, 154, -1, -1, -1', '9, 9, 154, -1, -1, -1', '9, 10, 155, -1, -1, -1', '9, 11, 154, -1, -1, -1', '9, 12, 154, -1, -1, -1', '9, 13, 154, -1, -1, -1', '9, 14, 153, -1, -1, -1', '9, 15, 153, -1, -1, -1', '9, 16, 152, -1, -1, -1', '9, 17, 152, -1, -1, -1', '9, 18, 152, -1, -1, -1', '9, 19, 152, -1, -1, -1', '10, 5, 152, -1, -1, -1', '10, 6, 152, -1, -1, -1', '10, 7, 153, -1, -1, -1', '10, 8, 153, -1, -1, -1', '10, 9, 154, -1, -1, -1', '10, 10, 154, -1, -1, -1', '10, 11, 154, -1, -1, -1', '10, 12, 155, -1, -1, -1', '10, 13, 154, -1, -1, -1', '10, 14, 154, -1, -1, -1', '10, 15, 154, -1, -1, -1', '10, 16, 153, -1, -1, -1', '10, 17, 153, -1, -1, -1', '10, 18, 153, -1, -1, -1', '10, 19, 152, -1, -1, -1', '10, 20, 152, -1, -1, -1', '10, 21, 152, -1, -1, -1', '11, 6, 152, -1, -1, -1', '11, 7, 152, -1, -1, -1', '11, 8, 153, -1, -1, -1', '11, 9, 153, -1, -1, -1', '11, 10, 154, -1, -1, -1', '11, 11, 154, -1, -1, -1', '11, 12, 155, -1, -1, -1', '11, 13, 155, -1, -1, -1', '11, 14, 155, -1, -1, -1', '11, 15, 154, -1, -1, -1', '11, 16, 154, -1, -1, -1', '11, 17, 154, -1, -1, -1', '11, 18, 154, -1, -1, -1', '11, 19, 153, -1, -1, -1', '11, 20, 153, -1, -1, -1', '11, 21, 152, -1, -1, -1', '11, 24, 152, -1, -1, -1', '12, 7, 152, -1, -1, -1', '12, 8, 152, -1, -1, -1', '12, 9, 153, -1, -1, -1', '12, 10, 153, -1, -1, -1', '12, 11, 154, -1, -1, -1', '12, 12, 154, -1, -1, -1', '12, 13, 155, -1, -1, -1', '12, 14, 155, -1, -1, -1', '12, 15, 263, -1, -1, -1', '12, 16, 263, -1, -1, -1', '12, 17, 154, -1, -1, -1', '12, 18, 154, -1, -1, -1', '12, 19, 154, -1, -1, -1', '12, 20, 154, -1, -1, -1', '12, 21, 153, -1, -1, -1', '12, 22, 152, -1, -1, -1', '12, 23, 152, -1, -1, -1', '13, 2, 151, -1, -1, -1', '13, 8, 152, -1, -1, -1', '13, 9, 152, -1, -1, -1', '13, 10, 153, -1, -1, -1', '13, 11, 153, -1, -1, -1', '13, 12, 154, -1, -1, -1', '13, 13, 154, -1, -1, -1', '13, 14, 155, -1, -1, -1', '13, 15, 154, -1, -1, -1', '13, 16, 155, -1, -1, -1', '13, 17, 155, -1, -1, -1', '13, 18, 155, -1, -1, -1', '13, 19, 154, -1, -1, -1', '13, 20, 154, -1, -1, -1', '13, 21, 154, -1, -1, -1', '13, 22, 153, -1, -1, -1', '13, 23, 152, -1, -1, -1', '13, 24, 152, -1, -1, -1', '13, 25, 152, -1, -1, -1', '14, 1, 259, -1, -1, -1', '14, 2, 260, -1, -1, -1', '14, 3, 259, -1, -1, -1', '14, 4, 151, -1, -1, -1', '14, 9, 152, -1, -1, -1', '14, 10, 152, -1, -1, -1', '14, 11, 153, -1, -1, -1', '14, 12, 153, -1, -1, -1', '14, 13, 154, -1, -1, -1', '14, 14, 155, -1, -1, -1', '14, 15, 155, -1, -1, -1', '14, 16, 155, -1, -1, -1', '14, 17, 154, -1, -1, -1', '14, 18, 155, -1, -1, -1', '14, 19, 154, -1, -1, -1', '14, 20, 155, -1, -1, -1', '14, 21, 154, -1, -1, -1', '14, 22, 154, -1, -1, -1', '14, 23, 153, -1, -1, -1', '14, 24, 152, -1, -1, -1', '14, 25, 152, -1, -1, -1', '15, 1, 150, -1, -1, -1', '15, 2, 150, -1, -1, -1', '15, 3, 260, -1, -1, -1', '15, 4, 151, -1, -1, -1', '15, 11, 152, -1, -1, -1', '15, 12, 153, -1, -1, -1', '15, 13, 154, -1, -1, -1', '15, 14, 154, -1, -1, -1', '15, 15, 155, -1, -1, -1', '15, 16, 154, -1, -1, -1', '15, 17, 155, -1, -1, -1', '15, 18, 155, -1, -1, -1', '15, 19, 154, -1, -1, -1', '15, 20, 155, -1, -1, -1', '15, 21, 155, -1, -1, -1', '15, 22, 154, -1, -1, -1', '15, 23, 153, -1, -1, -1', '15, 24, 152, -1, -1, -1', '15, 25, 152, -1, -1, -1', '15, 26, 152, -1, -1, -1', '16, 1, 151, -1, -1, -1', '16, 2, 260, -1, -1, -1', '16, 3, 151, -1, -1, -1', '16, 4, 151, -1, -1, -1', '16, 11, 152, -1, -1, -1', '16, 12, 153, -1, -1, -1', '16, 13, 153, -1, -1, -1', '16, 14, 154, -1, -1, -1', '16, 15, 155, -1, -1, -1', '16, 16, 154, -1, -1, -1', '16, 17, 155, -1, -1, -1', '16, 18, 154, -1, -1, -1', '16, 19, 155, -1, -1, -1', '16, 20, 155, -1, -1, -1', '16, 21, 155, -1, -1, -1', '16, 22, 154, -1, -1, -1', '16, 23, 154, -1, -1, -1', '16, 24, 153, -1, -1, -1', '16, 25, 152, -1, -1, -1', '16, 26, 152, -1, -1, -1', '16, 27, 152, -1, -1, -1', '17, 1, 148, -1, -1, -1', '17, 2, 259, -1, -1, -1', '17, 3, 259, -1, -1, -1', '17, 4, 149, -1, -1, -1', '17, 12, 152, -1, -1, -1', '17, 13, 153, -1, -1, -1', '17, 14, 154, -1, -1, -1', '17, 15, 154, -1, -1, -1', '17, 16, 154, -1, -1, -1', '17, 17, 154, -1, -1, -1', '17, 18, 154, -1, -1, -1', '17, 19, 154, -1, -1, -1', '17, 20, 155, -1, -1, -1', '17, 21, 155, -1, -1, -1', '17, 22, 155, -1, -1, -1', '17, 23, 154, -1, -1, -1', '17, 24, 153, -1, -1, -1', '17, 25, 152, -1, -1, -1', '17, 26, 152, -1, -1, -1', '17, 27, 152, -1, -1, -1', '18, 2, 151, -1, -1, -1', '18, 3, 259, -1, -1, -1', '18, 4, 259, -1, -1, -1', '18, 5, 150, -1, -1, -1', '18, 6, 149, -1, -1, -1', '18, 7, 259, -1, -1, -1', '18, 8, 151, -1, -1, -1', '18, 12, 152, -1, -1, -1', '18, 13, 153, -1, -1, -1', '18, 14, 153, -1, -1, -1', '18, 15, 154, -1, -1, -1', '18, 16, 155, -1, -1, -1', '18, 17, 155, -1, -1, -1', '18, 18, 154, -1, -1, -1', '18, 19, 155, -1, -1, -1', '18, 20, 154, -1, -1, -1', '18, 21, 155, -1, -1, -1', '18, 22, 155, -1, -1, -1', '18, 23, 154, -1, -1, -1', '18, 24, 153, -1, -1, -1', '18, 25, 152, -1, -1, -1', '18, 26, 152, -1, -1, -1', '19, 2, 149, -1, -1, -1', '19, 3, 260, -1, -1, -1', '19, 4, 151, -1, -1, -1', '19, 5, 148, -1, -1, -1', '19, 6, 151, -1, -1, -1', '19, 7, 260, -1, -1, -1', '19, 8, 148, -1, -1, -1', '19, 12, 152, -1, -1, -1', '19, 13, 153, -1, -1, -1', '19, 14, 153, -1, -1, -1', '19, 15, 154, -1, -1, -1', '19, 16, 154, -1, -1, -1', '19, 17, 154, -1, -1, -1', '19, 18, 155, -1, -1, -1', '19, 19, 155, -1, -1, -1', '19, 20, 155, -1, -1, -1', '19, 21, 155, -1, -1, -1', '19, 22, 154, -1, -1, -1', '19, 23, 154, -1, -1, -1', '19, 24, 153, -1, -1, -1', '19, 25, 152, -1, -1, -1', '19, 26, 152, -1, -1, -1', '20, 5, 260, -1, -1, -1', '20, 6, 259, -1, -1, -1', '20, 7, 151, -1, -1, -1', '20, 8, 260, -1, -1, -1', '20, 12, 152, -1, -1, -1', '20, 13, 152, -1, -1, -1', '20, 14, 153, -1, -1, -1', '20, 15, 154, -1, -1, -1', '20, 16, 154, -1, -1, -1', '20, 17, 154, -1, -1, -1', '20, 18, 155, -1, -1, -1', '20, 19, 155, -1, -1, -1', '20, 20, 155, -1, -1, -1', '20, 21, 155, -1, -1, -1', '20, 22, 154, -1, -1, -1', '20, 23, 154, -1, -1, -1', '20, 24, 153, -1, -1, -1', '20, 25, 152, -1, -1, -1', '21, 6, 260, -1, -1, -1', '21, 7, 260, -1, -1, -1', '21, 8, 260, -1, -1, -1', '21, 13, 152, -1, -1, -1', '21, 14, 153, -1, -1, -1', '21, 15, 153, -1, -1, -1', '21, 16, 154, -1, -1, -1', '21, 17, 154, -1, -1, -1', '21, 18, 154, -1, -1, -1', '21, 19, 155, -1, -1, -1', '21, 20, 154, -1, -1, -1', '21, 21, 154, -1, -1, -1', '21, 22, 154, -1, -1, -1', '21, 23, 153, -1, -1, -1', '21, 24, 153, -1, -1, -1', '21, 25, 152, -1, -1, -1', '22, 6, 151, -1, -1, -1', '22, 7, 150, -1, -1, -1', '22, 8, 151, -1, -1, -1', '22, 13, 152, -1, -1, -1', '22, 14, 152, -1, -1, -1', '22, 15, 153, -1, -1, -1', '22, 16, 153, -1, -1, -1', '22, 17, 153, -1, -1, -1', '22, 18, 154, -1, -1, -1', '22, 19, 154, -1, -1, -1', '22, 20, 154, -1, -1, -1', '22, 21, 153, -1, -1, -1', '22, 22, 153, -1, -1, -1', '22, 23, 152, -1, -1, -1', '22, 24, 152, -1, -1, -1', '23, 6, 260, -1, -1, -1', '23, 7, 259, -1, -1, -1', '23, 8, 260, -1, -1, -1', '23, 9, 149, -1, -1, -1', '23, 14, 152, -1, -1, -1', '23, 15, 152, -1, -1, -1', '23, 16, 152, -1, -1, -1', '23, 17, 152, -1, -1, -1', '23, 18, 153, -1, -1, -1', '23, 19, 153, -1, -1, -1', '23, 20, 153, -1, -1, -1', '23, 21, 152, -1, -1, -1', '23, 22, 152, -1, -1, -1', '23, 23, 152, -1, -1, -1', '23, 24, 152, -1, -1, -1', '24, 5, 151, -1, -1, -1', '24, 6, 148, -1, -1, -1', '24, 7, 260, -1, -1, -1', '24, 8, 151, -1, -1, -1', '24, 9, 151, -1, -1, -1', '24, 10, 151, -1, -1, -1', '24, 16, 152, -1, -1, -1', '24, 17, 152, -1, -1, -1', '24, 18, 152, -1, -1, -1', '24, 19, 152, -1, -1, -1', '24, 20, 152, -1, -1, -1', '24, 21, 152, -1, -1, -1', '25, 6, 259, -1, -1, -1', '25, 7, 151, -1, -1, -1', '25, 8, 151, -1, -1, -1', '25, 9, 151, -1, -1, -1', '25, 10, 151, -1, -1, -1', '25, 11, 148, -1, -1, -1', '25, 19, 152, -1, -1, -1', '25, 20, 152, -1, -1, -1', '26, 6, 260, -1, -1, -1', '26, 7, 260, -1, -1, -1', '26, 8, 151, -1, -1, -1', '26, 9, 259, -1, -1, -1', '26, 10, 259, -1, -1, -1', '26, 11, 151, -1, -1, -1', '27, 5, 151, -1, -1, -1', '27, 6, 148, -1, -1, -1', '27, 7, 260, -1, -1, -1', '27, 8, 259, -1, -1, -1', '27, 9, 260, -1, -1, -1', '27, 10, 260, -1, -1, -1', '27, 11, 151, -1, -1, -1', '27, 12, 150, -1, -1, -1', '28, 5, 151, -1, -1, -1', '28, 6, 151, -1, -1, -1', '28, 7, 151, -1, -1, -1', '28, 8, 149, -1, -1, -1', '28, 11, 260, -1, -1, -1', '28, 12, 260, -1, -1, -1', '29, 5, 260, -1, -1, -1', '29, 12, 259, -1, -1, -1', '29, 13, 148, -1, -1, -1', '30, 13, 150, -1, -1, -1', '38, 34, 144, -1, -1, -1', '38, 35, 144, -1, -1, -1', '39, 34, 145, -1, -1, -1', '39, 35, 145, -1, -1, -1', '40, 34, 144, -1, -1, -1', '40, 35, 146, -1, -1, -1', '40, 36, 144, -1, -1, -1', '41, 35, 144, -1, -1, -1', '41, 36, 144, -1, -1, -1', '42, 35, 144, -1, -1, -1', '42, 36, 144, -1, -1, -1', '43, 35, 144, -1, -1, -1', '43, 36, 144, -1, -1, -1', '47, 33, 152, -1, -1, -1', '47, 34, 152, -1, -1, -1', '47, 35, 152, -1, -1, -1', '48, 32, 152, -1, -1, -1', '48, 33, 152, -1, -1, -1', '48, 34, 153, -1, -1, -1', '48, 35, 153, -1, -1, -1', '48, 36, 152, -1, -1, -1', '49, 31, 152, -1, -1, -1', '49, 32, 152, -1, -1, -1', '49, 33, 153, -1, -1, -1', '49, 34, 153, -1, -1, -1', '49, 35, 153, -1, -1, -1', '49, 36, 153, -1, -1, -1', '49, 37, 152, -1, -1, -1', '50, 30, 152, -1, -1, -1', '50, 31, 152, -1, -1, -1', '50, 32, 153, -1, -1, -1', '50, 33, 153, -1, -1, -1', '50, 34, 154, -1, -1, -1', '50, 35, 154, -1, -1, -1', '50, 36, 153, -1, -1, -1', '50, 37, 153, -1, -1, -1', '50, 38, 152, -1, -1, -1', '51, 29, 152, -1, -1, -1', '51, 30, 152, -1, -1, -1', '51, 31, 153, -1, -1, -1', '51, 32, 153, -1, -1, -1', '51, 33, 154, -1, -1, -1', '51, 34, 154, -1, -1, -1', '51, 35, 154, -1, -1, -1', '51, 36, 154, -1, -1, -1', '51, 37, 153, -1, -1, -1', '51, 38, 153, -1, -1, -1', '51, 39, 152, -1, -1, -1', '52, 28, 152, -1, -1, -1', '52, 29, 152, -1, -1, -1', '52, 30, 153, -1, -1, -1', '52, 31, 153, -1, -1, -1', '52, 32, 154, -1, -1, -1', '52, 33, 155, -1, -1, -1', '52, 34, 155, -1, -1, -1', '52, 35, 155, -1, -1, -1', '52, 36, 154, -1, -1, -1', '52, 37, 154, -1, -1, -1', '52, 38, 153, -1, -1, -1', '52, 39, 153, -1, -1, -1', '52, 40, 152, -1, -1, -1', '53, 26, 152, -1, -1, -1', '53, 27, 152, -1, -1, -1', '53, 28, 153, -1, -1, -1', '53, 29, 153, -1, -1, -1', '53, 30, 154, -1, -1, -1', '53, 31, 154, -1, -1, -1', '53, 32, 155, -1, -1, -1', '53, 33, 155, -1, -1, -1', '53, 34, 155, -1, -1, -1', '53, 35, 155, -1, -1, -1', '53, 36, 263, -1, -1, -1', '53, 37, 154, -1, -1, -1', '53, 38, 154, -1, -1, -1', '53, 39, 153, -1, -1, -1', '53, 40, 152, -1, -1, -1', '53, 41, 152, -1, -1, -1', '53, 42, 152, -1, -1, -1', '54, 26, 152, -1, -1, -1', '54, 27, 152, -1, -1, -1', '54, 28, 153, -1, -1, -1', '54, 29, 154, -1, -1, -1', '54, 30, 154, -1, -1, -1', '54, 31, 155, -1, -1, -1', '54, 32, 154, -1, -1, -1', '54, 33, 155, -1, -1, -1', '54, 34, 154, -1, -1, -1', '54, 35, 155, -1, -1, -1', '54, 36, 155, -1, -1, -1', '54, 37, 155, -1, -1, -1', '54, 38, 154, -1, -1, -1', '54, 39, 154, -1, -1, -1', '54, 40, 153, -1, -1, -1', '54, 41, 153, -1, -1, -1', '54, 42, 153, -1, -1, -1', '54, 43, 152, -1, -1, -1', '54, 44, 152, -1, -1, -1', '55, 26, 152, -1, -1, -1', '55, 27, 153, -1, -1, -1', '55, 28, 154, -1, -1, -1', '55, 29, 154, -1, -1, -1', '55, 30, 155, -1, -1, -1', '55, 31, 155, -1, -1, -1', '55, 32, 154, -1, -1, -1', '55, 33, 155, -1, -1, -1', '55, 34, 154, -1, -1, -1', '55, 35, 155, -1, -1, -1', '55, 36, 155, -1, -1, -1', '55, 37, 155, -1, -1, -1', '55, 38, 263, -1, -1, -1', '55, 39, 154, -1, -1, -1', '55, 40, 154, -1, -1, -1', '55, 41, 153, -1, -1, -1', '55, 42, 153, -1, -1, -1', '55, 43, 153, -1, -1, -1', '55, 44, 152, -1, -1, -1', '55, 45, 152, -1, -1, -1', '56, 8, 144, -1, -1, -1', '56, 9, 144, -1, -1, -1', '56, 26, 152, -1, -1, -1', '56, 27, 153, -1, -1, -1', '56, 28, 153, -1, -1, -1', '56, 29, 154, -1, -1, -1', '56, 30, 155, -1, -1, -1', '56, 31, 155, -1, -1, -1', '56, 32, 154, -1, -1, -1', '56, 33, 154, -1, -1, -1', '56, 34, 155, -1, -1, -1', '56, 35, 154, -1, -1, -1', '56, 36, 154, -1, -1, -1', '56, 37, 155, -1, -1, -1', '56, 38, 155, -1, -1, -1', '56, 39, 263, -1, -1, -1', '56, 40, 154, -1, -1, -1', '56, 41, 154, -1, -1, -1', '56, 42, 153, -1, -1, -1', '56, 43, 153, -1, -1, -1', '56, 44, 153, -1, -1, -1', '56, 45, 153, -1, -1, -1', '56, 46, 152, -1, -1, -1', '56, 47, 152, -1, -1, -1', '57, 8, 144, -1, -1, -1', '57, 9, 146, -1, -1, -1', '57, 10, 144, -1, -1, -1', '57, 26, 152, -1, -1, -1', '57, 27, 152, -1, -1, -1', '57, 28, 153, -1, -1, -1', '57, 29, 154, -1, -1, -1', '57, 30, 155, -1, -1, -1', '57, 31, 155, -1, -1, -1', '57, 32, 155, -1, -1, -1', '57, 33, 155, -1, -1, -1', '57, 34, 154, -1, -1, -1', '57, 35, 155, -1, -1, -1', '57, 36, 154, -1, -1, -1', '57, 37, 155, -1, -1, -1', '57, 38, 155, -1, -1, -1', '57, 39, 155, -1, -1, -1', '57, 40, 155, -1, -1, -1', '57, 41, 154, -1, -1, -1', '57, 42, 154, -1, -1, -1', '57, 43, 154, -1, -1, -1', '57, 44, 153, -1, -1, -1', '57, 45, 153, -1, -1, -1', '57, 46, 153, -1, -1, -1', '57, 47, 152, -1, -1, -1', '58, 9, 144, -1, -1, -1', '58, 10, 144, -1, -1, -1', '58, 11, 144, -1, -1, -1', '58, 12, 144, -1, -1, -1', '58, 27, 152, -1, -1, -1', '58, 28, 153, -1, -1, -1', '58, 29, 154, -1, -1, -1', '58, 30, 155, -1, -1, -1', '58, 31, 155, -1, -1, -1', '58, 32, 155, -1, -1, -1', '58, 33, 155, -1, -1, -1', '58, 34, 155, -1, -1, -1', '58, 35, 155, -1, -1, -1', '58, 36, 155, -1, -1, -1', '58, 37, 154, -1, -1, -1', '58, 38, 155, -1, -1, -1', '58, 39, 155, -1, -1, -1', '58, 40, 155, -1, -1, -1', '58, 41, 155, -1, -1, -1', '58, 42, 154, -1, -1, -1', '58, 43, 153, -1, -1, -1', '58, 44, 153, -1, -1, -1', '58, 45, 152, -1, -1, -1', '58, 46, 152, -1, -1, -1', '58, 47, 152, -1, -1, -1', '59, 11, 144, -1, -1, -1', '59, 12, 144, -1, -1, -1', '59, 27, 152, -1, -1, -1', '59, 28, 153, -1, -1, -1', '59, 29, 154, -1, -1, -1', '59, 30, 154, -1, -1, -1', '59, 31, 155, -1, -1, -1', '59, 32, 155, -1, -1, -1', '59, 33, 154, -1, -1, -1', '59, 34, 155, -1, -1, -1', '59, 35, 154, -1, -1, -1', '59, 36, 155, -1, -1, -1', '59, 37, 154, -1, -1, -1', '59, 38, 155, -1, -1, -1', '59, 39, 155, -1, -1, -1', '59, 40, 155, -1, -1, -1', '59, 41, 154, -1, -1, -1', '59, 42, 154, -1, -1, -1', '59, 43, 153, -1, -1, -1', '59, 44, 152, -1, -1, -1', '59, 45, 152, -1, -1, -1', '59, 46, 152, -1, -1, -1', '60, 27, 152, -1, -1, -1', '60, 28, 153, -1, -1, -1', '60, 29, 153, -1, -1, -1', '60, 30, 154, -1, -1, -1', '60, 31, 154, -1, -1, -1', '60, 32, 154, -1, -1, -1', '60, 33, 155, -1, -1, -1', '60, 34, 155, -1, -1, -1', '60, 35, 155, -1, -1, -1', '60, 36, 154, -1, -1, -1', '60, 37, 154, -1, -1, -1', '60, 38, 155, -1, -1, -1', '60, 39, 155, -1, -1, -1', '60, 40, 155, -1, -1, -1', '60, 41, 154, -1, -1, -1', '60, 42, 153, -1, -1, -1', '60, 43, 152, -1, -1, -1', '60, 44, 152, -1, -1, -1', '60, 45, 152, -1, -1, -1', '61, 27, 152, -1, -1, -1', '61, 28, 152, -1, -1, -1', '61, 29, 152, -1, -1, -1', '61, 30, 153, -1, -1, -1', '61, 31, 154, -1, -1, -1', '61, 32, 154, -1, -1, -1', '61, 33, 154, -1, -1, -1', '61, 34, 155, -1, -1, -1', '61, 35, 155, -1, -1, -1', '61, 36, 154, -1, -1, -1', '61, 37, 154, -1, -1, -1', '61, 38, 155, -1, -1, -1', '61, 39, 154, -1, -1, -1', '61, 40, 154, -1, -1, -1', '61, 41, 154, -1, -1, -1', '61, 42, 153, -1, -1, -1', '61, 43, 152, -1, -1, -1', '61, 44, 152, -1, -1, -1', '62, 29, 152, -1, -1, -1', '62, 30, 152, -1, -1, -1', '62, 31, 153, -1, -1, -1', '62, 32, 154, -1, -1, -1', '62, 33, 154, -1, -1, -1', '62, 34, 155, -1, -1, -1', '62, 35, 155, -1, -1, -1', '62, 36, 154, -1, -1, -1', '62, 37, 154, -1, -1, -1', '62, 38, 155, -1, -1, -1', '62, 39, 154, -1, -1, -1', '62, 40, 154, -1, -1, -1', '62, 41, 153, -1, -1, -1', '62, 42, 152, -1, -1, -1', '62, 43, 152, -1, -1, -1', '63, 30, 152, -1, -1, -1', '63, 31, 153, -1, -1, -1', '63, 32, 153, -1, -1, -1', '63, 33, 154, -1, -1, -1', '63, 34, 154, -1, -1, -1', '63, 35, 154, -1, -1, -1', '63, 36, 155, -1, -1, -1', '63, 37, 155, -1, -1, -1', '63, 38, 155, -1, -1, -1', '63, 39, 154, -1, -1, -1', '63, 40, 153, -1, -1, -1', '63, 41, 152, -1, -1, -1', '63, 42, 152, -1, -1, -1', '64, 27, 145, -1, -1, -1', '64, 31, 152, -1, -1, -1', '64, 32, 153, -1, -1, -1', '64, 33, 154, -1, -1, -1', '64, 34, 154, -1, -1, -1', '64, 35, 154, -1, -1, -1', '64, 36, 154, -1, -1, -1', '64, 37, 155, -1, -1, -1', '64, 38, 154, -1, -1, -1', '64, 39, 153, -1, -1, -1', '64, 40, 153, -1, -1, -1', '64, 41, 152, -1, -1, -1', '65, 23, 144, -1, -1, -1', '65, 24, 145, -1, -1, -1', '65, 25, 146, -1, -1, -1', '65, 26, 146, -1, -1, -1', '65, 27, 146, -1, -1, -1', '65, 28, 144, -1, -1, -1', '65, 31, 152, -1, -1, -1', '65, 32, 152, -1, -1, -1', '65, 33, 153, -1, -1, -1', '65, 34, 153, -1, -1, -1', '65, 35, 153, -1, -1, -1', '65, 36, 154, -1, -1, -1', '65, 37, 154, -1, -1, -1', '65, 38, 154, -1, -1, -1', '65, 39, 153, -1, -1, -1', '65, 40, 152, -1, -1, -1', '66, 22, 144, -1, -1, -1', '66, 23, 146, -1, -1, -1', '66, 24, 307, -1, -1, -1', '66, 25, 146, -1, -1, -1', '66, 26, 145, -1, -1, -1', '66, 27, 145, -1, -1, -1', '66, 28, 145, -1, -1, -1', '66, 32, 152, -1, -1, -1', '66, 33, 152, -1, -1, -1', '66, 34, 153, -1, -1, -1', '66, 35, 153, -1, -1, -1', '66, 36, 153, -1, -1, -1', '66, 37, 153, -1, -1, -1', '66, 38, 153, -1, -1, -1', '66, 39, 152, -1, -1, -1', '66, 40, 152, -1, -1, -1', '67, 22, 146, -1, -1, -1', '67, 23, 146, -1, -1, -1', '67, 24, 146, -1, -1, -1', '67, 25, 146, -1, -1, -1', '67, 26, 144, -1, -1, -1', '67, 27, 145, -1, -1, -1', '67, 28, 145, -1, -1, -1', '67, 34, 152, -1, -1, -1', '67, 35, 153, -1, -1, -1', '67, 36, 152, -1, -1, -1', '67, 37, 153, -1, -1, -1', '67, 38, 153, -1, -1, -1', '67, 39, 152, -1, -1, -1', '68, 21, 145, -1, -1, -1', '68, 22, 307, -1, -1, -1', '68, 23, 146, -1, -1, -1', '68, 24, 146, -1, -1, -1', '68, 25, 146, -1, -1, -1', '68, 26, 144, -1, -1, -1', '68, 27, 145, -1, -1, -1', '68, 28, 146, -1, -1, -1', '68, 29, 145, -1, -1, -1', '68, 30, 145, -1, -1, -1', '68, 31, 144, -1, -1, -1', '68, 34, 152, -1, -1, -1', '68, 35, 153, -1, -1, -1', '68, 36, 153, -1, -1, -1', '68, 37, 153, -1, -1, -1', '68, 38, 152, -1, -1, -1', '69, 21, 145, -1, -1, -1', '69, 22, 146, -1, -1, -1', '69, 23, 146, -1, -1, -1', '69, 24, 146, -1, -1, -1', '69, 25, 144, -1, -1, -1', '69, 26, 146, -1, -1, -1', '69, 27, 146, -1, -1, -1', '69, 28, 146, -1, -1, -1', '69, 29, 307, -1, -1, -1', '69, 30, 147, -1, -1, -1', '69, 31, 145, -1, -1, -1', '69, 35, 152, -1, -1, -1', '69, 36, 153, -1, -1, -1', '69, 37, 153, -1, -1, -1', '69, 38, 152, -1, -1, -1', '70, 21, 145, -1, -1, -1', '70, 22, 145, -1, -1, -1', '70, 23, 145, -1, -1, -1', '70, 24, 307, -1, -1, -1', '70, 25, 147, -1, -1, -1', '70, 26, 307, -1, -1, -1', '70, 27, 146, -1, -1, -1', '70, 28, 146, -1, -1, -1', '70, 29, 146, -1, -1, -1', '70, 30, 147, -1, -1, -1', '70, 31, 145, -1, -1, -1', '70, 35, 152, -1, -1, -1', '70, 36, 152, -1, -1, -1', '71, 19, 144, -1, -1, -1', '71, 20, 145, -1, -1, -1', '71, 21, 146, -1, -1, -1', '71, 22, 146, -1, -1, -1', '71, 23, 146, -1, -1, -1', '71, 24, 147, -1, -1, -1', '71, 25, 307, -1, -1, -1', '71, 26, 145, -1, -1, -1', '71, 27, 145, -1, -1, -1', '71, 28, 145, -1, -1, -1', '71, 29, 146, -1, -1, -1', '71, 30, 145, -1, -1, -1', '71, 31, 144, -1, -1, -1', '72, 19, 145, -1, -1, -1', '72, 20, 147, -1, -1, -1', '72, 21, 147, -1, -1, -1', '72, 22, 147, -1, -1, -1', '72, 23, 145, -1, -1, -1', '72, 24, 145, -1, -1, -1', '72, 25, 147, -1, -1, -1', '72, 26, 146, -1, -1, -1', '72, 27, 144, -1, -1, -1', '72, 28, 145, -1, -1, -1', '72, 29, 145, -1, -1, -1', '73, 19, 144, -1, -1, -1', '73, 20, 146, -1, -1, -1', '73, 21, 145, -1, -1, -1', '73, 22, 146, -1, -1, -1', '73, 23, 146, -1, -1, -1', '73, 24, 144, -1, -1, -1', '73, 25, 146, -1, -1, -1', '73, 26, 146, -1, -1, -1', '73, 27, 145, -1, -1, -1', '73, 28, 146, -1, -1, -1', '73, 29, 145, -1, -1, -1', '74, 20, 144, -1, -1, -1', '74, 21, 145, -1, -1, -1', '74, 22, 144, -1, -1, -1', '74, 23, 144, -1, -1, -1', '74, 24, 145, -1, -1, -1', '74, 25, 145, -1, -1, -1', '74, 26, 146, -1, -1, -1', '74, 27, 307, -1, -1, -1', '74, 28, 146, -1, -1, -1', '74, 29, 144, -1, -1, -1', '75, 26, 144, -1, -1, -1', '75, 27, 146, -1, -1, -1', '75, 28, 146, -1, -1, -1', '75, 29, 144, -1, -1, -1', '76, 27, 144, -1, -1, -1', '76, 28, 145, -1, -1, -1', '76, 29, 144, -1, -1, -1', '78, 1, 151, -1, -1, -1', '78, 2, 151, -1, -1, -1', '79, 1, 151, -1, -1, -1', '79, 2, 260, -1, -1, -1', '79, 3, 260, -1, -1, -1', '80, 1, 151, -1, -1, -1', '80, 2, 260, -1, -1, -1', '80, 3, 151, -1, -1, -1', '80, 4, 149, -1, -1, -1', '80, 15, 152, -1, -1, -1', '80, 16, 152, -1, -1, -1', '80, 17, 152, -1, -1, -1', '81, 1, 151, -1, -1, -1', '81, 2, 259, -1, -1, -1', '81, 3, 148, -1, -1, -1', '81, 4, 259, -1, -1, -1', '81, 5, 260, -1, -1, -1', '81, 6, 149, -1, -1, -1', '81, 14, 152, -1, -1, -1', '81, 15, 152, -1, -1, -1', '81, 16, 152, -1, -1, -1', '81, 17, 152, -1, -1, -1', '81, 18, 153, -1, -1, -1', '81, 19, 153, -1, -1, -1', '81, 20, 152, -1, -1, -1', '82, 1, 150, -1, -1, -1', '82, 2, 149, -1, -1, -1', '82, 3, 259, -1, -1, -1', '82, 4, 260, -1, -1, -1', '82, 5, 149, -1, -1, -1', '82, 6, 259, -1, -1, -1', '82, 12, 152, -1, -1, -1', '82, 13, 152, -1, -1, -1', '82, 14, 153, -1, -1, -1', '82, 15, 153, -1, -1, -1', '82, 16, 153, -1, -1, -1', '82, 17, 153, -1, -1, -1', '82, 18, 153, -1, -1, -1', '82, 19, 153, -1, -1, -1', '82, 20, 153, -1, -1, -1', '82, 21, 152, -1, -1, -1', '82, 25, 152, -1, -1, -1', '82, 26, 152, -1, -1, -1', '82, 27, 152, -1, -1, -1', '83, 1, 149, -1, -1, -1', '83, 2, 151, -1, -1, -1', '83, 3, 260, -1, -1, -1', '83, 4, 151, -1, -1, -1', '83, 5, 149, -1, -1, -1', '83, 6, 260, -1, -1, -1', '83, 11, 152, -1, -1, -1', '83, 12, 152, -1, -1, -1', '83, 13, 153, -1, -1, -1', '83, 14, 153, -1, -1, -1', '83, 15, 153, -1, -1, -1', '83, 16, 153, -1, -1, -1', '83, 17, 154, -1, -1, -1', '83, 18, 154, -1, -1, -1', '83, 19, 153, -1, -1, -1', '83, 20, 153, -1, -1, -1', '83, 21, 153, -1, -1, -1', '83, 22, 152, -1, -1, -1', '83, 23, 152, -1, -1, -1', '83, 24, 152, -1, -1, -1', '83, 25, 152, -1, -1, -1', '83, 26, 152, -1, -1, -1', '83, 27, 152, -1, -1, -1', '84, 1, 151, -1, -1, -1', '84, 2, 151, -1, -1, -1', '84, 3, 151, -1, -1, -1', '84, 4, 151, -1, -1, -1', '84, 5, 149, -1, -1, -1', '84, 6, 151, -1, -1, -1', '84, 11, 152, -1, -1, -1', '84, 12, 152, -1, -1, -1', '84, 13, 153, -1, -1, -1', '84, 14, 153, -1, -1, -1', '84, 15, 153, -1, -1, -1', '84, 16, 154, -1, -1, -1', '84, 17, 154, -1, -1, -1', '84, 18, 154, -1, -1, -1', '84, 19, 154, -1, -1, -1', '84, 20, 153, -1, -1, -1', '84, 21, 153, -1, -1, -1', '84, 22, 153, -1, -1, -1', '84, 23, 152, -1, -1, -1', '84, 24, 152, -1, -1, -1', '84, 25, 152, -1, -1, -1', '85, 1, 260, -1, -1, -1', '85, 2, 149, -1, -1, -1', '85, 3, 259, -1, -1, -1', '85, 4, 259, -1, -1, -1', '85, 5, 151, -1, -1, -1', '85, 6, 259, -1, -1, -1', '85, 7, 151, -1, -1, -1', '85, 11, 152, -1, -1, -1', '85, 12, 152, -1, -1, -1', '85, 13, 153, -1, -1, -1', '85, 14, 153, -1, -1, -1', '85, 15, 154, -1, -1, -1', '85, 16, 154, -1, -1, -1', '85, 17, 154, -1, -1, -1', '85, 18, 154, -1, -1, -1', '85, 19, 154, -1, -1, -1', '85, 20, 153, -1, -1, -1', '85, 21, 153, -1, -1, -1', '85, 22, 153, -1, -1, -1', '85, 23, 152, -1, -1, -1', '85, 24, 152, -1, -1, -1', '86, 1, 260, -1, -1, -1', '86, 2, 150, -1, -1, -1', '86, 3, 151, -1, -1, -1', '86, 4, 259, -1, -1, -1', '86, 5, 260, -1, -1, -1', '86, 6, 150, -1, -1, -1', '86, 11, 152, -1, -1, -1', '86, 12, 153, -1, -1, -1', '86, 13, 153, -1, -1, -1', '86, 14, 153, -1, -1, -1', '86, 15, 154, -1, -1, -1', '86, 16, 154, -1, -1, -1', '86, 17, 154, -1, -1, -1', '86, 18, 155, -1, -1, -1', '86, 19, 154, -1, -1, -1', '86, 20, 154, -1, -1, -1', '86, 21, 153, -1, -1, -1', '86, 22, 152, -1, -1, -1', '86, 23, 152, -1, -1, -1', '86, 24, 152, -1, -1, -1', '87, 1, 151, -1, -1, -1', '87, 2, 150, -1, -1, -1', '87, 11, 152, -1, -1, -1', '87, 12, 153, -1, -1, -1', '87, 13, 153, -1, -1, -1', '87, 14, 154, -1, -1, -1', '87, 15, 154, -1, -1, -1', '87, 16, 154, -1, -1, -1', '87, 17, 154, -1, -1, -1', '87, 18, 263, -1, -1, -1', '87, 19, 154, -1, -1, -1', '87, 20, 154, -1, -1, -1', '87, 21, 154, -1, -1, -1', '87, 22, 152, -1, -1, -1', '87, 23, 152, -1, -1, -1', '87, 24, 152, -1, -1, -1', '88, 1, 151, -1, -1, -1', '88, 10, 152, -1, -1, -1', '88, 11, 153, -1, -1, -1', '88, 12, 153, -1, -1, -1', '88, 13, 154, -1, -1, -1', '88, 14, 154, -1, -1, -1', '88, 15, 154, -1, -1, -1', '88, 16, 154, -1, -1, -1', '88, 17, 154, -1, -1, -1', '88, 18, 154, -1, -1, -1', '88, 19, 155, -1, -1, -1', '88, 20, 154, -1, -1, -1', '88, 21, 154, -1, -1, -1', '88, 22, 153, -1, -1, -1', '88, 23, 153, -1, -1, -1', '88, 24, 152, -1, -1, -1', '89, 9, 152, -1, -1, -1', '89, 10, 152, -1, -1, -1', '89, 11, 153, -1, -1, -1', '89, 12, 154, -1, -1, -1', '89, 13, 154, -1, -1, -1', '89, 14, 154, -1, -1, -1', '89, 15, 154, -1, -1, -1', '89, 16, 154, -1, -1, -1', '89, 17, 155, -1, -1, -1', '89, 18, 154, -1, -1, -1', '89, 19, 155, -1, -1, -1', '89, 20, 154, -1, -1, -1', '89, 21, 154, -1, -1, -1', '89, 22, 154, -1, -1, -1', '89, 23, 153, -1, -1, -1', '89, 24, 152, -1, -1, -1', '89, 25, 152, -1, -1, -1', '90, 8, 152, -1, -1, -1', '90, 9, 152, -1, -1, -1', '90, 10, 153, -1, -1, -1', '90, 11, 153, -1, -1, -1', '90, 12, 154, -1, -1, -1', '90, 13, 154, -1, -1, -1', '90, 14, 154, -1, -1, -1', '90, 15, 155, -1, -1, -1', '90, 16, 154, -1, -1, -1', '90, 17, 154, -1, -1, -1', '90, 18, 155, -1, -1, -1', '90, 19, 155, -1, -1, -1', '90, 20, 154, -1, -1, -1', '90, 21, 154, -1, -1, -1', '90, 22, 154, -1, -1, -1', '90, 23, 153, -1, -1, -1', '90, 24, 152, -1, -1, -1', '90, 25, 152, -1, -1, -1', '91, 6, 152, -1, -1, -1', '91, 7, 152, -1, -1, -1', '91, 8, 152, -1, -1, -1', '91, 9, 153, -1, -1, -1', '91, 10, 153, -1, -1, -1', '91, 11, 154, -1, -1, -1', '91, 12, 154, -1, -1, -1', '91, 13, 154, -1, -1, -1', '91, 14, 155, -1, -1, -1', '91, 15, 154, -1, -1, -1', '91, 16, 155, -1, -1, -1', '91, 17, 155, -1, -1, -1', '91, 18, 155, -1, -1, -1', '91, 19, 155, -1, -1, -1', '91, 20, 154, -1, -1, -1', '91, 21, 154, -1, -1, -1', '91, 22, 153, -1, -1, -1', '91, 23, 153, -1, -1, -1', '91, 24, 152, -1, -1, -1', '91, 25, 152, -1, -1, -1', '92, 5, 152, -1, -1, -1', '92, 6, 152, -1, -1, -1', '92, 7, 153, -1, -1, -1', '92, 8, 153, -1, -1, -1', '92, 9, 153, -1, -1, -1', '92, 10, 154, -1, -1, -1', '92, 11, 154, -1, -1, -1', '92, 12, 154, -1, -1, -1', '92, 13, 155, -1, -1, -1', '92, 14, 154, -1, -1, -1', '92, 15, 155, -1, -1, -1', '92, 16, 155, -1, -1, -1', '92, 17, 155, -1, -1, -1', '92, 18, 155, -1, -1, -1', '92, 19, 154, -1, -1, -1', '92, 20, 154, -1, -1, -1', '92, 21, 155, -1, -1, -1', '92, 22, 154, -1, -1, -1', '92, 23, 153, -1, -1, -1', '92, 24, 152, -1, -1, -1', '93, 3, 152, -1, -1, -1', '93, 4, 152, -1, -1, -1', '93, 5, 152, -1, -1, -1', '93, 6, 153, -1, -1, -1', '93, 7, 153, -1, -1, -1', '93, 8, 154, -1, -1, -1', '93, 9, 154, -1, -1, -1', '93, 10, 154, -1, -1, -1', '93, 11, 154, -1, -1, -1', '93, 12, 155, -1, -1, -1', '93, 13, 154, -1, -1, -1', '93, 14, 155, -1, -1, -1', '93, 15, 155, -1, -1, -1', '93, 16, 155, -1, -1, -1', '93, 17, 155, -1, -1, -1', '93, 18, 155, -1, -1, -1', '93, 19, 155, -1, -1, -1', '93, 20, 154, -1, -1, -1', '93, 21, 154, -1, -1, -1', '93, 22, 154, -1, -1, -1', '93, 23, 153, -1, -1, -1', '93, 24, 152, -1, -1, -1', '94, 1, 152, -1, -1, -1', '94, 2, 152, -1, -1, -1', '94, 3, 152, -1, -1, -1', '94, 4, 152, -1, -1, -1', '94, 5, 153, -1, -1, -1', '94, 6, 153, -1, -1, -1', '94, 7, 154, -1, -1, -1', '94, 8, 154, -1, -1, -1', '94, 9, 154, -1, -1, -1', '94, 10, 154, -1, -1, -1', '94, 11, 154, -1, -1, -1', '94, 12, 154, -1, -1, -1', '94, 13, 155, -1, -1, -1', '94, 14, 154, -1, -1, -1', '94, 15, 154, -1, -1, -1', '94, 16, 155, -1, -1, -1', '94, 17, 155, -1, -1, -1', '94, 18, 154, -1, -1, -1', '94, 19, 155, -1, -1, -1', '94, 20, 154, -1, -1, -1', '94, 21, 154, -1, -1, -1', '94, 22, 154, -1, -1, -1', '94, 23, 153, -1, -1, -1', '94, 24, 152, -1, -1, -1', '94, 25, 152, -1, -1, -1', '95, 1, 152, -1, -1, -1', '95, 2, 152, -1, -1, -1', '95, 3, 152, -1, -1, -1', '95, 4, 153, -1, -1, -1', '95, 5, 153, -1, -1, -1', '95, 6, 154, -1, -1, -1', '95, 7, 154, -1, -1, -1', '95, 8, 154, -1, -1, -1', '95, 9, 154, -1, -1, -1', '95, 10, 155, -1, -1, -1', '95, 11, 155, -1, -1, -1', '95, 12, 154, -1, -1, -1', '95, 13, 154, -1, -1, -1', '95, 14, 263, -1, -1, -1', '95, 15, 154, -1, -1, -1', '95, 16, 154, -1, -1, -1', '95, 17, 155, -1, -1, -1', '95, 18, 155, -1, -1, -1', '95, 19, 155, -1, -1, -1', '95, 20, 155, -1, -1, -1', '95, 21, 154, -1, -1, -1', '95, 22, 154, -1, -1, -1', '95, 23, 153, -1, -1, -1', '95, 24, 152, -1, -1, -1', '95, 25, 153, -1, -1, -1', '96, 1, 152, -1, -1, -1', '96, 2, 152, -1, -1, -1', '96, 3, 152, -1, -1, -1', '96, 4, 152, -1, -1, -1', '96, 5, 152, -1, -1, -1', '96, 6, 153, -1, -1, -1', '96, 7, 153, -1, -1, -1', '96, 8, 154, -1, -1, -1', '96, 9, 154, -1, -1, -1', '96, 10, 154, -1, -1, -1', '96, 11, 155, -1, -1, -1', '96, 12, 154, -1, -1, -1', '96, 13, 155, -1, -1, -1', '96, 14, 155, -1, -1, -1', '96, 15, 155, -1, -1, -1', '96, 16, 155, -1, -1, -1', '96, 17, 155, -1, -1, -1', '96, 18, 154, -1, -1, -1', '96, 19, 155, -1, -1, -1', '96, 20, 155, -1, -1, -1', '96, 21, 155, -1, -1, -1', '96, 22, 154, -1, -1, -1', '96, 23, 153, -1, -1, -1', '96, 24, 152, -1, -1, -1', '96, 25, 152, -1, -1, -1', '97, 2, 152, -1, -1, -1', '97, 5, 152, -1, -1, -1', '97, 6, 152, -1, -1, -1', '97, 7, 153, -1, -1, -1', '97, 8, 153, -1, -1, -1', '97, 9, 154, -1, -1, -1', '97, 10, 154, -1, -1, -1', '97, 11, 154, -1, -1, -1', '97, 12, 155, -1, -1, -1', '97, 13, 155, -1, -1, -1', '97, 14, 154, -1, -1, -1', '97, 15, 155, -1, -1, -1', '97, 16, 154, -1, -1, -1', '97, 17, 155, -1, -1, -1', '97, 18, 154, -1, -1, -1', '97, 19, 154, -1, -1, -1', '97, 20, 155, -1, -1, -1', '97, 21, 154, -1, -1, -1', '97, 22, 154, -1, -1, -1', '97, 23, 153, -1, -1, -1', '97, 24, 153, -1, -1, -1', '97, 25, 152, -1, -1, -1', '98, 6, 152, -1, -1, -1', '98, 7, 152, -1, -1, -1', '98, 8, 152, -1, -1, -1', '98, 9, 153, -1, -1, -1', '98, 10, 153, -1, -1, -1', '98, 11, 154, -1, -1, -1', '98, 12, 154, -1, -1, -1', '98, 13, 154, -1, -1, -1', '98, 14, 155, -1, -1, -1', '98, 15, 155, -1, -1, -1', '98, 16, 154, -1, -1, -1', '98, 17, 155, -1, -1, -1', '98, 18, 155, -1, -1, -1', '98, 19, 154, -1, -1, -1', '98, 20, 155, -1, -1, -1', '98, 21, 154, -1, -1, -1', '98, 22, 154, -1, -1, -1', '98, 23, 154, -1, -1, -1', '98, 24, 153, -1, -1, -1', '98, 25, 152, -1, -1, -1', '99, 8, 152, -1, -1, -1', '99, 9, 152, -1, -1, -1', '99, 10, 153, -1, -1, -1', '99, 11, 153, -1, -1, -1', '99, 12, 154, -1, -1, -1', '99, 13, 154, -1, -1, -1', '99, 14, 155, -1, -1, -1', '99, 15, 154, -1, -1, -1', '99, 16, 155, -1, -1, -1', '99, 17, 155, -1, -1, -1', '99, 18, 155, -1, -1, -1', '99, 19, 155, -1, -1, -1', '99, 20, 154, -1, -1, -1', '99, 21, 154, -1, -1, -1', '99, 22, 154, -1, -1, -1', '99, 23, 154, -1, -1, -1', '99, 24, 153, -1, -1, -1', '99, 25, 153, -1, -1, -1', '99, 26, 152, -1, -1, -1', '99, 27, 152, -1, -1, -1', '100, 1, 260, -1, -1, -1', '100, 2, 260, -1, -1, -1', '100, 3, 260, -1, -1, -1', '100, 4, 260, -1, -1, -1', '100, 9, 152, -1, -1, -1', '100, 10, 152, -1, -1, -1', '100, 11, 153, -1, -1, -1', '100, 12, 153, -1, -1, -1', '100, 13, 154, -1, -1, -1', '100, 14, 154, -1, -1, -1', '100, 15, 155, -1, -1, -1', '100, 16, 155, -1, -1, -1', '100, 17, 154, -1, -1, -1', '100, 18, 155, -1, -1, -1', '100, 19, 155, -1, -1, -1', '100, 20, 154, -1, -1, -1', '100, 21, 155, -1, -1, -1', '100, 22, 154, -1, -1, -1', '100, 23, 154, -1, -1, -1', '100, 24, 155, -1, -1, -1', '100, 25, 153, -1, -1, -1', '100, 26, 153, -1, -1, -1', '100, 27, 152, -1, -1, -1', '100, 28, 152, -1, -1, -1', '101, 1, 260, -1, -1, -1', '101, 2, 260, -1, -1, -1', '101, 3, 260, -1, -1, -1', '101, 4, 260, -1, -1, -1', '101, 10, 152, -1, -1, -1', '101, 11, 152, -1, -1, -1', '101, 12, 153, -1, -1, -1', '101, 13, 153, -1, -1, -1', '101, 14, 154, -1, -1, -1', '101, 15, 154, -1, -1, -1', '101, 16, 155, -1, -1, -1', '101, 17, 154, -1, -1, -1', '101, 18, 154, -1, -1, -1', '101, 19, 155, -1, -1, -1', '101, 20, 155, -1, -1, -1', '101, 21, 154, -1, -1, -1', '101, 22, 154, -1, -1, -1', '101, 23, 155, -1, -1, -1', '101, 24, 154, -1, -1, -1', '101, 25, 154, -1, -1, -1', '101, 26, 153, -1, -1, -1', '101, 27, 152, -1, -1, -1', '101, 28, 152, -1, -1, -1', '101, 29, 152, -1, -1, -1', '102, 1, 260, -1, -1, -1', '102, 2, 260, -1, -1, -1', '102, 3, 260, -1, -1, -1', '102, 4, 260, -1, -1, -1', '102, 7, 260, -1, -1, -1', '102, 8, 260, -1, -1, -1', '102, 11, 152, -1, -1, -1', '102, 12, 152, -1, -1, -1', '102, 13, 153, -1, -1, -1', '102, 14, 153, -1, -1, -1', '102, 15, 154, -1, -1, -1', '102, 16, 154, -1, -1, -1', '102, 17, 155, -1, -1, -1', '102, 18, 155, -1, -1, -1', '102, 19, 154, -1, -1, -1', '102, 20, 155, -1, -1, -1', '102, 21, 154, -1, -1, -1', '102, 22, 154, -1, -1, -1', '102, 23, 155, -1, -1, -1', '102, 24, 154, -1, -1, -1', '102, 25, 154, -1, -1, -1', '102, 26, 154, -1, -1, -1', '102, 27, 152, -1, -1, -1', '102, 28, 152, -1, -1, -1', '102, 29, 152, -1, -1, -1', '103, 1, 260, -1, -1, -1', '103, 2, 260, -1, -1, -1', '103, 3, 260, -1, -1, -1', '103, 4, 260, -1, -1, -1', '103, 7, 260, -1, -1, -1', '103, 8, 260, -1, -1, -1', '103, 11, 152, -1, -1, -1', '103, 12, 152, -1, -1, -1', '103, 13, 153, -1, -1, -1', '103, 14, 153, -1, -1, -1', '103, 15, 154, -1, -1, -1', '103, 16, 154, -1, -1, -1', '103, 17, 155, -1, -1, -1', '103, 18, 155, -1, -1, -1', '103, 19, 154, -1, -1, -1', '103, 20, 154, -1, -1, -1', '103, 21, 154, -1, -1, -1', '103, 22, 155, -1, -1, -1', '103, 23, 154, -1, -1, -1', '103, 24, 154, -1, -1, -1', '103, 25, 154, -1, -1, -1', '103, 26, 154, -1, -1, -1', '103, 27, 153, -1, -1, -1', '103, 28, 152, -1, -1, -1', '103, 29, 152, -1, -1, -1', '103, 30, 152, -1, -1, -1', '104, 1, 260, -1, -1, -1', '104, 2, 260, -1, -1, -1', '104, 3, 260, -1, -1, -1', '104, 4, 260, -1, -1, -1', '104, 5, 260, -1, -1, -1', '104, 6, 260, -1, -1, -1', '104, 7, 260, -1, -1, -1', '104, 8, 260, -1, -1, -1', '104, 11, 152, -1, -1, -1', '104, 12, 153, -1, -1, -1', '104, 13, 153, -1, -1, -1', '104, 14, 154, -1, -1, -1', '104, 15, 155, -1, -1, -1', '104, 16, 155, -1, -1, -1', '104, 17, 155, -1, -1, -1', '104, 18, 155, -1, -1, -1', '104, 19, 155, -1, -1, -1', '104, 20, 154, -1, -1, -1', '104, 21, 154, -1, -1, -1', '104, 22, 155, -1, -1, -1', '104, 23, 155, -1, -1, -1', '104, 24, 155, -1, -1, -1', '104, 25, 154, -1, -1, -1', '104, 26, 154, -1, -1, -1', '104, 27, 153, -1, -1, -1', '104, 28, 152, -1, -1, -1', '104, 29, 152, -1, -1, -1', '104, 30, 152, -1, -1, -1', '104, 31, 152, -1, -1, -1', '105, 1, 260, -1, -1, -1', '105, 2, 260, -1, -1, -1', '105, 3, 260, -1, -1, -1', '105, 4, 260, -1, -1, -1', '105, 5, 260, -1, -1, -1', '105, 6, 260, -1, -1, -1', '105, 7, 260, -1, -1, -1', '105, 8, 260, -1, -1, -1', '105, 10, 152, -1, -1, -1', '105, 11, 152, -1, -1, -1', '105, 12, 153, -1, -1, -1', '105, 13, 154, -1, -1, -1', '105, 14, 154, -1, -1, -1', '105, 15, 155, -1, -1, -1', '105, 16, 155, -1, -1, -1', '105, 17, 155, -1, -1, -1', '105, 18, 155, -1, -1, -1', '105, 19, 155, -1, -1, -1', '105, 20, 154, -1, -1, -1', '105, 21, 155, -1, -1, -1', '105, 22, 155, -1, -1, -1', '105, 23, 154, -1, -1, -1', '105, 24, 155, -1, -1, -1', '105, 25, 154, -1, -1, -1', '105, 26, 153, -1, -1, -1', '105, 27, 153, -1, -1, -1', '105, 28, 152, -1, -1, -1', '105, 29, 152, -1, -1, -1', '105, 30, 152, -1, -1, -1', '105, 31, 152, -1, -1, -1', '106, 1, 260, -1, -1, -1', '106, 2, 260, -1, -1, -1', '106, 3, 260, -1, -1, -1', '106, 6, 260, -1, -1, -1', '106, 7, 260, -1, -1, -1', '106, 10, 152, -1, -1, -1', '106, 11, 153, -1, -1, -1', '106, 12, 153, -1, -1, -1', '106, 13, 154, -1, -1, -1', '106, 14, 155, -1, -1, -1', '106, 15, 154, -1, -1, -1', '106, 16, 154, -1, -1, -1', '106, 17, 155, -1, -1, -1', '106, 18, 154, -1, -1, -1', '106, 19, 154, -1, -1, -1', '106, 20, 155, -1, -1, -1', '106, 21, 155, -1, -1, -1', '106, 22, 155, -1, -1, -1', '106, 23, 155, -1, -1, -1', '106, 24, 155, -1, -1, -1', '106, 25, 154, -1, -1, -1', '106, 26, 153, -1, -1, -1', '106, 27, 153, -1, -1, -1', '106, 28, 152, -1, -1, -1', '106, 29, 152, -1, -1, -1', '106, 30, 152, -1, -1, -1', '106, 31, 152, -1, -1, -1', '107, 1, 260, -1, -1, -1', '107, 6, 260, -1, -1, -1', '107, 7, 260, -1, -1, -1', '107, 9, 152, -1, -1, -1', '107, 10, 153, -1, -1, -1', '107, 11, 153, -1, -1, -1', '107, 12, 154, -1, -1, -1', '107, 13, 154, -1, -1, -1', '107, 14, 154, -1, -1, -1', '107, 15, 154, -1, -1, -1', '107, 16, 155, -1, -1, -1', '107, 17, 155, -1, -1, -1', '107, 18, 155, -1, -1, -1', '107, 19, 155, -1, -1, -1', '107, 20, 155, -1, -1, -1', '107, 21, 155, -1, -1, -1', '107, 22, 155, -1, -1, -1', '107, 23, 155, -1, -1, -1', '107, 24, 154, -1, -1, -1', '107, 25, 154, -1, -1, -1', '107, 26, 153, -1, -1, -1', '107, 27, 153, -1, -1, -1', '107, 28, 152, -1, -1, -1', '107, 29, 152, -1, -1, -1', '107, 30, 152, -1, -1, -1', '107, 31, 152, -1, -1, -1', '108, 1, 260, -1, -1, -1', '108, 6, 260, -1, -1, -1', '108, 7, 260, -1, -1, -1', '108, 9, 152, -1, -1, -1', '108, 10, 153, -1, -1, -1', '108, 11, 153, -1, -1, -1', '108, 12, 153, -1, -1, -1', '108, 13, 153, -1, -1, -1', '108, 14, 154, -1, -1, -1', '108, 15, 154, -1, -1, -1', '108, 16, 155, -1, -1, -1', '108, 17, 155, -1, -1, -1', '108, 18, 155, -1, -1, -1', '108, 19, 155, -1, -1, -1', '108, 20, 154, -1, -1, -1', '108, 21, 154, -1, -1, -1', '108, 22, 155, -1, -1, -1', '108, 23, 155, -1, -1, -1', '108, 24, 154, -1, -1, -1', '108, 25, 154, -1, -1, -1', '108, 26, 153, -1, -1, -1', '108, 27, 153, -1, -1, -1', '108, 28, 152, -1, -1, -1', '108, 29, 152, -1, -1, -1', '108, 30, 152, -1, -1, -1', '109, 1, 260, -1, -1, -1', '109, 5, 260, -1, -1, -1', '109, 6, 260, -1, -1, -1', '109, 7, 260, -1, -1, -1', '109, 9, 152, -1, -1, -1', '109, 10, 152, -1, -1, -1', '109, 11, 152, -1, -1, -1', '109, 12, 152, -1, -1, -1', '109, 13, 153, -1, -1, -1', '109, 14, 153, -1, -1, -1', '109, 15, 154, -1, -1, -1', '109, 16, 154, -1, -1, -1', '109, 17, 154, -1, -1, -1', '109, 18, 155, -1, -1, -1', '109, 19, 155, -1, -1, -1', '109, 20, 154, -1, -1, -1', '109, 21, 154, -1, -1, -1', '109, 22, 155, -1, -1, -1', '109, 23, 155, -1, -1, -1', '109, 24, 154, -1, -1, -1', '109, 25, 154, -1, -1, -1', '109, 26, 153, -1, -1, -1', '109, 27, 152, -1, -1, -1', '109, 28, 152, -1, -1, -1', '109, 29, 152, -1, -1, -1', '110, 4, 260, -1, -1, -1', '110, 5, 260, -1, -1, -1', '110, 6, 260, -1, -1, -1', '110, 7, 260, -1, -1, -1', '110, 9, 152, -1, -1, -1', '110, 10, 152, -1, -1, -1', '110, 11, 152, -1, -1, -1', '110, 12, 152, -1, -1, -1', '110, 13, 152, -1, -1, -1', '110, 14, 152, -1, -1, -1', '110, 15, 153, -1, -1, -1', '110, 16, 153, -1, -1, -1', '110, 17, 154, -1, -1, -1', '110, 18, 154, -1, -1, -1', '110, 19, 154, -1, -1, -1', '110, 20, 155, -1, -1, -1', '110, 21, 155, -1, -1, -1', '110, 22, 154, -1, -1, -1', '110, 23, 154, -1, -1, -1', '110, 24, 154, -1, -1, -1', '110, 25, 153, -1, -1, -1', '110, 26, 153, -1, -1, -1', '110, 27, 152, -1, -1, -1', '110, 28, 152, -1, -1, -1', '111, 4, 260, -1, -1, -1', '111, 5, 260, -1, -1, -1', '111, 6, 260, -1, -1, -1', '111, 7, 260, -1, -1, -1', '111, 15, 152, -1, -1, -1', '111, 16, 152, -1, -1, -1', '111, 17, 153, -1, -1, -1', '111, 18, 153, -1, -1, -1', '111, 19, 154, -1, -1, -1', '111, 20, 154, -1, -1, -1', '111, 21, 154, -1, -1, -1', '111, 22, 154, -1, -1, -1', '111, 23, 154, -1, -1, -1', '111, 24, 153, -1, -1, -1', '111, 25, 153, -1, -1, -1', '111, 26, 152, -1, -1, -1', '111, 27, 152, -1, -1, -1', '111, 28, 152, -1, -1, -1', '112, 3, 260, -1, -1, -1', '112, 4, 260, -1, -1, -1', '112, 5, 260, -1, -1, -1', '112, 6, 260, -1, -1, -1', '112, 7, 260, -1, -1, -1', '112, 8, 260, -1, -1, -1', '112, 9, 260, -1, -1, -1', '112, 16, 152, -1, -1, -1', '112, 17, 152, -1, -1, -1', '112, 18, 152, -1, -1, -1', '112, 19, 153, -1, -1, -1', '112, 20, 153, -1, -1, -1', '112, 21, 154, -1, -1, -1', '112, 22, 152, -1, -1, -1', '112, 23, 153, -1, -1, -1', '112, 24, 153, -1, -1, -1', '112, 25, 152, -1, -1, -1', '112, 26, 152, -1, -1, -1', '113, 4, 260, -1, -1, -1', '113, 5, 260, -1, -1, -1', '113, 6, 260, -1, -1, -1', '113, 7, 260, -1, -1, -1', '113, 8, 260, -1, -1, -1', '113, 9, 260, -1, -1, -1', '113, 10, 260, -1, -1, -1', '113, 11, 260, -1, -1, -1', '113, 19, 152, -1, -1, -1', '113, 20, 153, -1, -1, -1', '113, 21, 152, -1, -1, -1', '113, 22, 153, -1, -1, -1', '113, 23, 153, -1, -1, -1', '113, 24, 152, -1, -1, -1', '113, 25, 152, -1, -1, -1', '113, 26, 152, -1, -1, -1', '113, 42, 144, -1, -1, -1', '113, 43, 145, -1, -1, -1', '113, 44, 144, -1, -1, -1', '114, 5, 260, -1, -1, -1', '114, 6, 260, -1, -1, -1', '114, 7, 260, -1, -1, -1', '114, 8, 260, -1, -1, -1', '114, 23, 152, -1, -1, -1', '114, 24, 152, -1, -1, -1', '114, 25, 152, -1, -1, -1', '114, 26, 152, -1, -1, -1', '114, 40, 144, -1, -1, -1', '114, 41, 145, -1, -1, -1', '114, 42, 146, -1, -1, -1', '114, 43, 145, -1, -1, -1', '114, 44, 146, -1, -1, -1', '114, 45, 145, -1, -1, -1', '114, 46, 145, -1, -1, -1', '114, 47, 144, -1, -1, -1', '115, 6, 260, -1, -1, -1', '115, 7, 260, -1, -1, -1', '115, 39, 144, -1, -1, -1', '115, 40, 146, -1, -1, -1', '115, 41, 147, -1, -1, -1', '115, 42, 146, -1, -1, -1', '115, 43, 146, -1, -1, -1', '115, 44, 146, -1, -1, -1', '115, 45, 146, -1, -1, -1', '115, 46, 145, -1, -1, -1', '115, 47, 144, -1, -1, -1', '116, 39, 144, -1, -1, -1', '116, 40, 146, -1, -1, -1', '116, 41, 147, -1, -1, -1', '116, 42, 146, -1, -1, -1', '116, 43, 145, -1, -1, -1', '116, 44, 145, -1, -1, -1', '116, 45, 146, -1, -1, -1', '116, 46, 144, -1, -1, -1', '117, 40, 145, -1, -1, -1', '117, 41, 146, -1, -1, -1', '117, 42, 145, -1, -1, -1', '117, 43, 144, -1, -1, -1', '117, 44, 144, -1, -1, -1', '117, 45, 145, -1, -1, -1', '117, 46, 144, -1, -1, -1', '118, 40, 144, -1, -1, -1', '118, 41, 144, -1, -1, -1', '141, 30, 151, -1, -1, -1', '141, 31, 148, -1, -1, -1', '142, 29, 150, -1, -1, -1', '142, 32, 260, -1, -1, -1'], False, False);
end;


procedure UB1;
begin
  if not Bs then
    Exit;
  Actions.MapTilesArraySetS(['27, 87, -1, -1, -1, 254', '27, 89, -1, -1, -1, 254', '28, 86, -1, -1, -1, 254', '28, 88, -1, -1, -1, 254', '28, 90, -1, -1, -1, 254', '28, 94, -1, -1, -1, 254', '29, 87, -1, -1, -1, 254', '29, 89, -1, -1, -1, 254', '29, 90, -1, -1, -1, 254', '29, 91, -1, -1, -1, 254', '29, 93, -1, -1, -1, 254', '29, 94, -1, -1, -1, 254', '29, 95, -1, -1, -1, 254', '30, 84, -1, -1, -1, 254', '30, 86, -1, -1, -1, 254', '30, 88, -1, -1, -1, 254', '30, 90, -1, -1, -1, 254', '30, 92, -1, -1, -1, 254', '30, 94, -1, -1, -1, 254', '30, 95, -1, -1, -1, 254', '30, 96, -1, -1, -1, 254', '31, 85, -1, -1, -1, 254', '31, 89, -1, -1, -1, 254', '31, 91, -1, -1, -1, 254', '31, 92, -1, -1, -1, 254', '31, 93, -1, -1, -1, 254', '31, 95, -1, -1, -1, 254', '31, 97, -1, -1, -1, 254', '32, 84, -1, -1, -1, 254', '32, 86, -1, -1, -1, 254', '32, 90, -1, -1, -1, 254', '32, 92, -1, -1, -1, 254', '32, 94, -1, -1, -1, 254', '32, 96, -1, -1, -1, 254', '32, 98, -1, -1, -1, 254', '33, 84, -1, -1, -1, 254', '33, 87, -1, -1, -1, 254', '33, 89, -1, -1, -1, 254', '33, 93, -1, -1, -1, 254', '33, 94, -1, -1, -1, 254', '33, 95, -1, -1, -1, 254', '33, 96, -1, -1, -1, 254', '33, 97, -1, -1, -1, 254', '33, 99, -1, -1, -1, 254', '34, 90, -1, -1, -1, 254', '34, 92, -1, -1, -1, 254', '34, 94, -1, -1, -1, 254', '34, 96, -1, -1, -1, 254', '34, 98, -1, -1, -1, 254', '35, 84, -1, -1, -1, 254', '35, 85, -1, -1, -1, 254', '35, 87, -1, -1, -1, 254', '35, 89, -1, -1, -1, 254', '35, 91, -1, -1, -1, 254', '35, 93, -1, -1, -1, 254', '35, 95, -1, -1, -1, 254', '35, 97, -1, -1, -1, 254', '36, 85, -1, -1, -1, 254', '36, 88, -1, -1, -1, 254', '36, 92, -1, -1, -1, 254', '36, 94, -1, -1, -1, 254', '36, 96, -1, -1, -1, 254', '37, 86, -1, -1, -1, 254', '37, 88, -1, -1, -1, 254', '37, 90, -1, -1, -1, 254', '37, 93, -1, -1, -1, 254', '38, 88, -1, -1, -1, 254', '38, 89, -1, -1, -1, 254', '38, 91, -1, -1, -1, 254', '38, 92, -1, -1, -1, 254', '40, 88, -1, -1, -1, 254', '48, 84, -1, -1, -1, 254', '49, 82, -1, -1, -1, 254', '49, 85, -1, -1, -1, 254', '50, 83, -1, -1, -1, 254', '50, 87, -1, -1, -1, 254', '51, 85, -1, -1, -1, 254', '51, 88, -1, -1, -1, 254', '52, 83, -1, -1, -1, 254', '52, 85, -1, -1, -1, 254', '52, 86, -1, -1, -1, 254', '52, 88, -1, -1, -1, 254', '52, 89, -1, -1, -1, 254', '53, 87, -1, -1, -1, 254', '53, 89, -1, -1, -1, 254', '53, 90, -1, -1, -1, 254', '53, 92, -1, -1, -1, 254', '53, 94, -1, -1, -1, 254', '54, 84, -1, -1, -1, 254', '54, 89, -1, -1, -1, 254', '54, 90, -1, -1, -1, 254', '55, 83, -1, -1, -1, 254', '55, 85, -1, -1, -1, 254', '55, 88, -1, -1, -1, 254', '55, 89, -1, -1, -1, 254', '55, 90, -1, -1, -1, 254', '55, 91, -1, -1, -1, 254', '55, 92, -1, -1, -1, 254', '55, 93, -1, -1, -1, 254', '56, 82, -1, -1, -1, 254', '56, 84, -1, -1, -1, 254', '56, 87, -1, -1, -1, 254', '56, 91, -1, -1, -1, 254', '57, 83, -1, -1, -1, 254', '57, 85, -1, -1, -1, 254', '57, 86, -1, -1, -1, 254', '57, 87, -1, -1, -1, 254', '57, 89, -1, -1, -1, 254', '57, 91, -1, -1, -1, 254', '57, 92, -1, -1, -1, 254', '57, 94, -1, -1, -1, 254', '58, 83, -1, -1, -1, 254', '58, 86, -1, -1, -1, 254', '58, 88, -1, -1, -1, 254', '58, 90, -1, -1, -1, 254', '58, 91, -1, -1, -1, 254', '58, 92, -1, -1, -1, 254', '58, 93, -1, -1, -1, 254', '59, 84, -1, -1, -1, 254', '59, 89, -1, -1, -1, 254', '59, 92, -1, -1, -1, 254', '59, 94, -1, -1, -1, 254', '60, 93, -1, -1, -1, 254', '60, 95, -1, -1, -1, 254', '61, 96, -1, -1, -1, 254', '62, 94, -1, -1, -1, 254', '62, 95, -1, -1, -1, 254', '88, 79, -1, -1, -1, 254', '88, 91, -1, -1, -1, 254', '88, 92, -1, -1, -1, 254', '89, 75, -1, -1, -1, 254', '89, 80, -1, -1, -1, 254', '89, 86, -1, -1, -1, 254', '89, 88, -1, -1, -1, 254', '89, 89, -1, -1, -1, 254', '89, 92, -1, -1, -1, 254', '89, 95, -1, -1, -1, 254', '90, 74, -1, -1, -1, 254', '90, 76, -1, -1, -1, 254', '90, 77, -1, -1, -1, 254', '90, 79, -1, -1, -1, 254', '90, 84, -1, -1, -1, 254', '90, 87, -1, -1, -1, 254', '90, 89, -1, -1, -1, 254', '90, 92, -1, -1, -1, 254', '90, 93, -1, -1, -1, 254', '90, 96, -1, -1, -1, 254', '91, 73, -1, -1, -1, 254', '91, 74, -1, -1, -1, 254', '91, 76, -1, -1, -1, 254', '91, 79, -1, -1, -1, 254', '91, 80, -1, -1, -1, 254', '91, 83, -1, -1, -1, 254', '91, 84, -1, -1, -1, 254', '91, 85, -1, -1, -1, 254', '91, 87, -1, -1, -1, 254', '91, 88, -1, -1, -1, 254', '91, 89, -1, -1, -1, 254', '91, 90, -1, -1, -1, 254', '91, 91, -1, -1, -1, 254', '91, 92, -1, -1, -1, 254', '91, 93, -1, -1, -1, 254', '91, 94, -1, -1, -1, 254', '91, 95, -1, -1, -1, 254', '91, 96, -1, -1, -1, 254', '92, 73, -1, -1, -1, 254', '92, 75, -1, -1, -1, 254', '92, 77, -1, -1, -1, 254', '92, 85, -1, -1, -1, 254', '92, 86, -1, -1, -1, 254', '92, 87, -1, -1, -1, 254', '92, 88, -1, -1, -1, 254', '92, 91, -1, -1, -1, 254', '92, 92, -1, -1, -1, 254', '92, 93, -1, -1, -1, 254', '92, 97, -1, -1, -1, 254', '93, 73, -1, -1, -1, 254', '93, 74, -1, -1, -1, 254', '93, 76, -1, -1, -1, 254', '93, 79, -1, -1, -1, 254', '93, 80, -1, -1, -1, 254', '93, 83, -1, -1, -1, 254', '93, 85, -1, -1, -1, 254', '93, 86, -1, -1, -1, 254', '93, 89, -1, -1, -1, 254', '93, 92, -1, -1, -1, 254', '94, 75, -1, -1, -1, 254', '94, 77, -1, -1, -1, 254', '94, 81, -1, -1, -1, 254', '94, 84, -1, -1, -1, 254', '94, 85, -1, -1, -1, 254', '94, 90, -1, -1, -1, 254', '94, 92, -1, -1, -1, 254', '94, 93, -1, -1, -1, 254', '94, 94, -1, -1, -1, 254', '95, 74, -1, -1, -1, 254', '95, 76, -1, -1, -1, 254', '95, 78, -1, -1, -1, 254', '95, 80, -1, -1, -1, 254', '95, 83, -1, -1, -1, 254', '95, 84, -1, -1, -1, 254', '95, 87, -1, -1, -1, 254', '95, 88, -1, -1, -1, 254', '95, 91, -1, -1, -1, 254', '95, 93, -1, -1, -1, 254', '95, 94, -1, -1, -1, 254', '95, 95, -1, -1, -1, 254', '95, 96, -1, -1, -1, 254', '95, 97, -1, -1, -1, 254', '96, 76, -1, -1, -1, 254', '96, 79, -1, -1, -1, 254', '96, 84, -1, -1, -1, 254', '96, 89, -1, -1, -1, 254', '96, 94, -1, -1, -1, 254', '96, 96, -1, -1, -1, 254', '96, 97, -1, -1, -1, 254', '97, 77, -1, -1, -1, 254', '97, 78, -1, -1, -1, 254', '97, 86, -1, -1, -1, 254', '97, 90, -1, -1, -1, 254', '97, 92, -1, -1, -1, 254', '97, 94, -1, -1, -1, 254', '97, 97, -1, -1, -1, 254', '98, 87, -1, -1, -1, 254', '98, 91, -1, -1, -1, 254', '98, 92, -1, -1, -1, 254', '98, 93, -1, -1, -1, 254', '98, 94, -1, -1, -1, 254', '98, 96, -1, -1, -1, 254', '98, 97, -1, -1, -1, 254', '99, 91, -1, -1, -1, 254', '99, 94, -1, -1, -1, 254', '99, 95, -1, -1, -1, 254', '99, 96, -1, -1, -1, 254', '100, 93, -1, -1, -1, 254', '100, 94, -1, -1, -1, 254', '101, 78, -1, -1, -1, 254', '101, 91, -1, -1, -1, 254', '101, 93, -1, -1, -1, 254', '101, 94, -1, -1, -1, 254', '102, 77, -1, -1, -1, 254', '102, 79, -1, -1, -1, 254', '102, 87, -1, -1, -1, 254', '102, 91, -1, -1, -1, 254', '102, 93, -1, -1, -1, 254', '102, 94, -1, -1, -1, 254', '103, 81, -1, -1, -1, 254', '103, 92, -1, -1, -1, 254', '103, 93, -1, -1, -1, 254', '103, 94, -1, -1, -1, 254', '103, 95, -1, -1, -1, 254', '104, 81, -1, -1, -1, 254', '104, 86, -1, -1, -1, 254', '104, 90, -1, -1, -1, 254', '104, 91, -1, -1, -1, 254', '104, 92, -1, -1, -1, 254', '104, 96, -1, -1, -1, 254', '105, 79, -1, -1, -1, 254', '105, 80, -1, -1, -1, 254', '105, 89, -1, -1, -1, 254', '105, 90, -1, -1, -1, 254', '105, 92, -1, -1, -1, 254', '105, 93, -1, -1, -1, 254', '105, 94, -1, -1, -1, 254', '105, 95, -1, -1, -1, 254', '105, 96, -1, -1, -1, 254', '106, 82, -1, -1, -1, 254', '106, 95, -1, -1, -1, 254', '107, 83, -1, -1, -1, 254', '107, 85, -1, -1, -1, 254', '107, 87, -1, -1, -1, 254', '107, 96, -1, -1, -1, 254', '108, 83, -1, -1, -1, 254', '108, 84, -1, -1, -1, 254', '108, 88, -1, -1, -1, 254', '109, 82, -1, -1, -1, 254', '109, 84, -1, -1, -1, 254', '109, 86, -1, -1, -1, 254', '110, 83, -1, -1, -1, 254', '111, 84, -1, -1, -1, 254', '111, 86, -1, -1, -1, 254'], False, False);
end;


procedure UB2;
begin
  Actions.MapTilesArraySetS(['27, 87, -1, -1, -1, 255', '27, 89, -1, -1, -1, 255', '28, 86, -1, -1, -1, 255', '28, 88, -1, -1, -1, 255', '28, 90, -1, -1, -1, 255', '28, 94, -1, -1, -1, 255', '29, 87, -1, -1, -1, 255', '29, 89, -1, -1, -1, 255', '29, 90, -1, -1, -1, 255', '29, 91, -1, -1, -1, 255', '29, 93, -1, -1, -1, 255', '29, 94, -1, -1, -1, 255', '29, 95, -1, -1, -1, 255', '30, 84, -1, -1, -1, 255', '30, 86, -1, -1, -1, 255', '30, 88, -1, -1, -1, 255', '30, 90, -1, -1, -1, 255', '30, 92, -1, -1, -1, 255', '30, 94, -1, -1, -1, 255', '30, 95, -1, -1, -1, 255', '30, 96, -1, -1, -1, 255', '31, 85, -1, -1, -1, 255', '31, 89, -1, -1, -1, 255', '31, 91, -1, -1, -1, 255', '31, 92, -1, -1, -1, 255', '31, 93, -1, -1, -1, 255', '31, 95, -1, -1, -1, 255', '31, 97, -1, -1, -1, 255', '32, 84, -1, -1, -1, 255', '32, 86, -1, -1, -1, 255', '32, 90, -1, -1, -1, 255', '32, 92, -1, -1, -1, 255', '32, 94, -1, -1, -1, 255', '32, 96, -1, -1, -1, 255', '32, 98, -1, -1, -1, 255', '33, 84, -1, -1, -1, 255', '33, 87, -1, -1, -1, 255', '33, 89, -1, -1, -1, 255', '33, 93, -1, -1, -1, 255', '33, 94, -1, -1, -1, 255', '33, 95, -1, -1, -1, 255', '33, 96, -1, -1, -1, 255', '33, 97, -1, -1, -1, 255', '33, 99, -1, -1, -1, 255', '34, 90, -1, -1, -1, 255', '34, 92, -1, -1, -1, 255', '34, 94, -1, -1, -1, 255', '34, 96, -1, -1, -1, 255', '34, 98, -1, -1, -1, 255', '35, 84, -1, -1, -1, 255', '35, 85, -1, -1, -1, 255', '35, 87, -1, -1, -1, 255', '35, 89, -1, -1, -1, 255', '35, 91, -1, -1, -1, 255', '35, 93, -1, -1, -1, 255', '35, 95, -1, -1, -1, 255', '35, 97, -1, -1, -1, 255', '36, 85, -1, -1, -1, 255', '36, 88, -1, -1, -1, 255', '36, 92, -1, -1, -1, 255', '36, 94, -1, -1, -1, 255', '36, 96, -1, -1, -1, 255', '37, 86, -1, -1, -1, 255', '37, 88, -1, -1, -1, 255', '37, 90, -1, -1, -1, 255', '37, 93, -1, -1, -1, 255', '38, 88, -1, -1, -1, 255', '38, 89, -1, -1, -1, 255', '38, 91, -1, -1, -1, 255', '38, 92, -1, -1, -1, 255', '40, 88, -1, -1, -1, 255', '48, 84, -1, -1, -1, 255', '49, 82, -1, -1, -1, 255', '49, 85, -1, -1, -1, 255', '50, 83, -1, -1, -1, 255', '50, 87, -1, -1, -1, 255', '51, 85, -1, -1, -1, 255', '51, 88, -1, -1, -1, 255', '52, 83, -1, -1, -1, 255', '52, 85, -1, -1, -1, 255', '52, 86, -1, -1, -1, 255', '52, 88, -1, -1, -1, 255', '52, 89, -1, -1, -1, 255', '53, 87, -1, -1, -1, 255', '53, 89, -1, -1, -1, 255', '53, 90, -1, -1, -1, 255', '53, 92, -1, -1, -1, 255', '53, 94, -1, -1, -1, 255', '54, 84, -1, -1, -1, 255', '54, 89, -1, -1, -1, 255', '54, 90, -1, -1, -1, 255', '55, 83, -1, -1, -1, 255', '55, 85, -1, -1, -1, 255', '55, 88, -1, -1, -1, 255', '55, 89, -1, -1, -1, 255', '55, 90, -1, -1, -1, 255', '55, 91, -1, -1, -1, 255', '55, 92, -1, -1, -1, 255', '55, 93, -1, -1, -1, 255', '56, 82, -1, -1, -1, 255', '56, 84, -1, -1, -1, 255', '56, 87, -1, -1, -1, 255', '56, 91, -1, -1, -1, 255', '57, 83, -1, -1, -1, 255', '57, 85, -1, -1, -1, 255', '57, 86, -1, -1, -1, 255', '57, 87, -1, -1, -1, 255', '57, 89, -1, -1, -1, 255', '57, 91, -1, -1, -1, 255', '57, 92, -1, -1, -1, 255', '57, 94, -1, -1, -1, 255', '58, 83, -1, -1, -1, 255', '58, 86, -1, -1, -1, 255', '58, 88, -1, -1, -1, 255', '58, 90, -1, -1, -1, 255', '58, 91, -1, -1, -1, 255', '58, 92, -1, -1, -1, 255', '58, 93, -1, -1, -1, 255', '59, 84, -1, -1, -1, 255', '59, 89, -1, -1, -1, 255', '59, 92, -1, -1, -1, 255', '59, 94, -1, -1, -1, 255', '60, 93, -1, -1, -1, 255', '60, 95, -1, -1, -1, 255', '61, 96, -1, -1, -1, 255', '62, 94, -1, -1, -1, 255', '62, 95, -1, -1, -1, 255', '88, 79, -1, -1, -1, 255', '88, 91, -1, -1, -1, 255', '88, 92, -1, -1, -1, 255', '89, 75, -1, -1, -1, 255', '89, 80, -1, -1, -1, 255', '89, 86, -1, -1, -1, 255', '89, 88, -1, -1, -1, 255', '89, 89, -1, -1, -1, 255', '89, 92, -1, -1, -1, 255', '89, 95, -1, -1, -1, 255', '90, 74, -1, -1, -1, 255', '90, 76, -1, -1, -1, 255', '90, 77, -1, -1, -1, 255', '90, 79, -1, -1, -1, 255', '90, 84, -1, -1, -1, 255', '90, 87, -1, -1, -1, 255', '90, 89, -1, -1, -1, 255', '90, 92, -1, -1, -1, 255', '90, 93, -1, -1, -1, 255', '90, 96, -1, -1, -1, 255', '91, 73, -1, -1, -1, 255', '91, 74, -1, -1, -1, 255', '91, 76, -1, -1, -1, 255', '91, 79, -1, -1, -1, 255', '91, 80, -1, -1, -1, 255', '91, 83, -1, -1, -1, 255', '91, 84, -1, -1, -1, 255', '91, 85, -1, -1, -1, 255', '91, 87, -1, -1, -1, 255', '91, 88, -1, -1, -1, 255', '91, 89, -1, -1, -1, 255', '91, 90, -1, -1, -1, 255', '91, 91, -1, -1, -1, 255', '91, 92, -1, -1, -1, 255', '91, 93, -1, -1, -1, 255', '91, 94, -1, -1, -1, 255', '91, 95, -1, -1, -1, 255', '91, 96, -1, -1, -1, 255', '92, 73, -1, -1, -1, 255', '92, 75, -1, -1, -1, 255', '92, 77, -1, -1, -1, 255', '92, 85, -1, -1, -1, 255', '92, 86, -1, -1, -1, 255', '92, 87, -1, -1, -1, 255', '92, 88, -1, -1, -1, 255', '92, 91, -1, -1, -1, 255', '92, 92, -1, -1, -1, 255', '92, 93, -1, -1, -1, 255', '92, 97, -1, -1, -1, 255', '93, 73, -1, -1, -1, 255', '93, 74, -1, -1, -1, 255', '93, 76, -1, -1, -1, 255', '93, 79, -1, -1, -1, 255', '93, 80, -1, -1, -1, 255', '93, 83, -1, -1, -1, 255', '93, 85, -1, -1, -1, 255', '93, 86, -1, -1, -1, 255', '93, 89, -1, -1, -1, 255', '93, 92, -1, -1, -1, 255', '94, 75, -1, -1, -1, 255', '94, 77, -1, -1, -1, 255', '94, 81, -1, -1, -1, 255', '94, 84, -1, -1, -1, 255', '94, 85, -1, -1, -1, 255', '94, 90, -1, -1, -1, 255', '94, 92, -1, -1, -1, 255', '94, 93, -1, -1, -1, 255', '94, 94, -1, -1, -1, 255', '95, 74, -1, -1, -1, 255', '95, 76, -1, -1, -1, 255', '95, 78, -1, -1, -1, 255', '95, 80, -1, -1, -1, 255', '95, 83, -1, -1, -1, 255', '95, 84, -1, -1, -1, 255', '95, 87, -1, -1, -1, 255', '95, 88, -1, -1, -1, 255', '95, 91, -1, -1, -1, 255', '95, 93, -1, -1, -1, 255', '95, 94, -1, -1, -1, 255', '95, 95, -1, -1, -1, 255', '95, 96, -1, -1, -1, 255', '95, 97, -1, -1, -1, 255', '96, 76, -1, -1, -1, 255', '96, 79, -1, -1, -1, 255', '96, 84, -1, -1, -1, 255', '96, 89, -1, -1, -1, 255', '96, 94, -1, -1, -1, 255', '96, 96, -1, -1, -1, 255', '96, 97, -1, -1, -1, 255', '97, 77, -1, -1, -1, 255', '97, 78, -1, -1, -1, 255', '97, 86, -1, -1, -1, 255', '97, 90, -1, -1, -1, 255', '97, 92, -1, -1, -1, 255', '97, 94, -1, -1, -1, 255', '97, 97, -1, -1, -1, 255', '98, 87, -1, -1, -1, 255', '98, 91, -1, -1, -1, 255', '98, 92, -1, -1, -1, 255', '98, 93, -1, -1, -1, 255', '98, 94, -1, -1, -1, 255', '98, 96, -1, -1, -1, 255', '98, 97, -1, -1, -1, 255', '99, 91, -1, -1, -1, 255', '99, 94, -1, -1, -1, 255', '99, 95, -1, -1, -1, 255', '99, 96, -1, -1, -1, 255', '100, 93, -1, -1, -1, 255', '100, 94, -1, -1, -1, 255', '101, 78, -1, -1, -1, 255', '101, 91, -1, -1, -1, 255', '101, 93, -1, -1, -1, 255', '101, 94, -1, -1, -1, 255', '102, 77, -1, -1, -1, 255', '102, 79, -1, -1, -1, 255', '102, 87, -1, -1, -1, 255', '102, 91, -1, -1, -1, 255', '102, 93, -1, -1, -1, 255', '102, 94, -1, -1, -1, 255', '103, 81, -1, -1, -1, 255', '103, 92, -1, -1, -1, 255', '103, 93, -1, -1, -1, 255', '103, 94, -1, -1, -1, 255', '103, 95, -1, -1, -1, 255', '104, 81, -1, -1, -1, 255', '104, 86, -1, -1, -1, 255', '104, 90, -1, -1, -1, 255', '104, 91, -1, -1, -1, 255', '104, 92, -1, -1, -1, 255', '104, 96, -1, -1, -1, 255', '105, 79, -1, -1, -1, 255', '105, 80, -1, -1, -1, 255', '105, 89, -1, -1, -1, 255', '105, 90, -1, -1, -1, 255', '105, 92, -1, -1, -1, 255', '105, 93, -1, -1, -1, 255', '105, 94, -1, -1, -1, 255', '105, 95, -1, -1, -1, 255', '105, 96, -1, -1, -1, 255', '106, 82, -1, -1, -1, 255', '106, 95, -1, -1, -1, 255', '107, 83, -1, -1, -1, 255', '107, 85, -1, -1, -1, 255', '107, 87, -1, -1, -1, 255', '107, 96, -1, -1, -1, 255', '108, 83, -1, -1, -1, 255', '108, 84, -1, -1, -1, 255', '108, 88, -1, -1, -1, 255', '109, 82, -1, -1, -1, 255', '109, 84, -1, -1, -1, 255', '109, 86, -1, -1, -1, 255', '110, 83, -1, -1, -1, 255', '111, 84, -1, -1, -1, 255', '111, 86, -1, -1, -1, 255'], False, False);
end;


{$COMMAND sb: BBs}


procedure BBs(P, Value: Integer);
var
  aValue: Integer;
begin
  if not Utils.InRangeI(P, 0, 1) then
    Exit;
  aValue := Utils.EnsureRangeI(Value, 0, 1);
  Bs := Boolean(aValue);
  if aValue = 0 then
    UB2;
end;


procedure OnTick;
var
  I, K: Integer;
begin
  for I := 2 to 9 do
    if States.GameTime mod AUTOFEED_TIME = 5 * I then
      AutoFeed(I);

  if States.GameTime mod DEPOSITS_TIME = 0 then
    UpdateDeposits;

  if States.GameTime mod BT = 0 then
    UB1;

  if States.GameTime mod FISH_TIME = 0 then
    Actions.GiveAnimal(31, 64, 86);

  if States.GameTime mod BarbarianRate = 0 then
    CreateBarbarian;

  if States.GameTime mod ARMY_TYPE_TIME = 0 then
    for I := 2 to 9 do
      ChangeArmyType(I);

  if States.GameTime mod WEAPON_TIME = 0 then
    SetWeaponsOrder;

  for K := 0 to 1 do
    if SoundAllowed[K] then
    begin
      if (States.KaMRandom > 0.5)
      and (States.GameTime mod AMBIENT_TIME = 0) then
      begin
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 74, 90);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 71, 127);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 9, 148);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 3, 84);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 133, 145);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 92, 30);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 44, 4);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 4, 55);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 4, 25);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 120, 89);
      end;

      if (States.KaMRandom < 0.4)
      and (States.GameTime mod AMBIENT_TIME = 33) then
        if Length(Wolves) > 0 then
          for I := Low(Wolves) to High(Wolves) do
            if not States.UnitDead(Wolves[I]) then
              if States.KaMRandom < 0.25 then
                 Actions.PlayOGGAtLocation(K, 'Wolf' + IntToStr(1 + States.KaMRandomI(3)), Utils.MinS(States.KaMRandom, 0.35), 32, States.UnitPositionX(Wolves[I]), States.UnitPositionY(Wolves[I]));

    end;

end;