const
  AUTOFEED_TIME = 6000;
  DEPOSITS_TIME = 600;
  AMBIENT_TIME = 250;
  TARGETS_TIME = 300;


var
  Wolves: array of Integer;
  SoundAllowed: array[0..2] of Boolean;
  Msg: Boolean;


procedure FindWolves;
var
  aX, aY, W: Integer;
begin
  for aX := 1 to States.MapWidth - 1 do
    for aY := 1 to States.MapHeight - 1 do
    begin
      W := States.UnitAt(aX, aY);
      if W > 0 then
        if States.UnitType(W) = 30 then
        begin
          SetLength(Wolves, Length(Wolves) + 1);
          if Length(Wolves) > 0 then
            Wolves[Length(Wolves) - 1] := W;
        end;
    end;
end;


procedure SetWareDistribution;
var
  I: Integer;
begin
  for I := 3 to 10 do
  begin
    Actions.PlayerWareDistribution(I, 6, 2, 5);
    Actions.PlayerWareDistribution(I, 6, 10, 5);
    Actions.PlayerWareDistribution(I, 5, 1, 5);
    Actions.PlayerWareDistribution(I, 5, 15, 5);
    Actions.PlayerWareDistribution(I, 5, 2, 5);
    Actions.PlayerWareDistribution(I, 5, 10, 5);
    Actions.PlayerWareDistribution(I, 2, 20, 5);
    Actions.PlayerWareDistribution(I, 2, 19, 5);
    Actions.PlayerWareDistribution(I, 9, 22, 5);
    Actions.PlayerWareDistribution(I, 9, 16, 5);
    Actions.PlayerWareDistribution(I, 9, 12, 5);
  end;
end;


procedure BlockWares;
var
  H: array of Integer;
  I, K: Integer;
begin
  for I := 3 to 10 do
  begin
    H := States.PlayerGetAllHouses(I);

    if Length(H) <= 0 then
      Exit;

    for K := Low(H) to High(H) do
      if States.HouseType(H[K]) = 11 then
      begin
        Actions.HouseWareBlock(H[K], 0, True);
        Actions.HouseWareBlock(H[K], 3, True);
        Actions.HouseWareBlock(H[K], 4, True);
        Actions.HouseWareBlock(H[K], 5, True);
        Actions.HouseWareBlock(H[K], 6, True);
        Actions.HouseWareBlock(H[K], 9, True);
        Actions.HouseWareBlock(H[K], 11, True);
        Actions.HouseWareBlock(H[K], 14, True);
        Actions.HouseWareBlock(H[K], 15, True);
      end;
  end;
end;


{$COMMAND sound: TurnSoundOnOff}


procedure TurnSoundOnOff(P, Value: Integer);
var
  aValue: Integer;
begin
  if not Utils.InRangeI(P, 0, 2) then
    Exit;
  aValue := Utils.EnsureRangeI(Value, 0, 1);
  SoundAllowed[P] := Boolean(aValue);
end;


function GroupsFormation(P, GT: Integer): Integer;
var
  aCount, aColumns: Integer;
begin
  States.AIGroupsFormationGet(P, GT, aCount, aColumns);
  Result := aCount;
end;


function DefenceSquadsCount(P, aGT: Integer): Integer;
var
  I, aX, aY: Integer;
  GT, DT: Byte; 
  R: Word;
begin
  Result := 0;
  if States.StatAIDefencePositionsCount(P) > 0 then
    for I := 0 to States.StatAIDefencePositionsCount(P) - 1 do
    begin
      States.AIDefencePositionGet(P, I, aX, aY, GT, R, DT);
      if (DT = 0)
      and (GT = aGT) then
        Result := Result + 1;
    end;
end;


function SoldiersForDefence(P: Integer): Integer;
var
  I: Integer;
begin
  Result := 0;
  for I := 0 to 3 do
    Result := Result + DefenceSquadsCount(P, I) * GroupsFormation(P, I);
end;


function AttackAmount(P: Integer): Integer;
begin
  case P of
    10:  Result := Utils.IfThenI(States.MissionDifficulty = mdHard3, 60, 0);
    5:   Result := 40 + 5 * (Byte(States.MissionDifficulty) - 3)
    else Result := 35 + 5 * (Byte(States.MissionDifficulty) - 3);
  end;
end;


function SoldiersToEquip(P: Integer): Integer;
begin
  Result := SoldiersForDefence(P) + AttackAmount(P) - States.StatArmyCount(P) - States.StatUnitTypeCount(P, 13) + States.StatHouseTypeCount(P, 17) + 5;
  if P = 10 then
    Result := Result + States.StatArmyCount(P);
end;


function FirstAttackTimer(P: Integer): Integer;
begin
  case States.MissionDifficulty of
    mdEasy1:
      case P of
        3,6,9: Result := 63000;
        4,7,8: Result := 39000;
        5:     Result := 42000
        else   Result := 0;
      end;

    mdNormal:
      case P of
        3,6,9: Result := 60000;
        4,7,8: Result := 37500;
        5:     Result := 40500
        else   Result := 0;
      end;

    mdHard1:
      case P of
        3,6,9: Result := 57000;
        4,7,8: Result := 36000;
        5:     Result := 39000
        else   Result := 0;
      end;

    mdHard2:
      case P of
        3,6,9: Result := 51000;
        4,7,8: Result := 36000;
        5:     Result := 39000
        else   Result := 0;
      end;

    mdHard3:
      case P of
        3,6,9: Result := 48000;
        4,7,8: Result := 34500;
        5:     Result := 37500
        else   Result := 51000;
      end;
  end;
end;


procedure UpdateTargets;
begin
  Actions.AIStartPosition(5, 10 + States.KaMRandomI(180), 10 + States.KaMRandomI(190));
  if States.MissionDifficulty = mdHard3 then
    case States.KaMRandomI(3) of
      0: Actions.AIStartPosition(10, 140, 60);
      1: Actions.AIStartPosition(10, 140, 120);
      2: Actions.AIStartPosition(10, 140, 180);
    end;
end;


procedure AddOutpost;
var
  H, I: Integer;
begin
  Actions.GiveHouse(10, 21, 46, 5);
  Actions.GiveWeapons(10, 17, 10);
  Actions.GiveWeapons(10, 19, 10);
  Actions.GiveWeapons(10, 21, 10);
  Actions.GiveWeapons(10, 26, 10);
  Actions.GiveHouse(10, 11, 60, 4);
  H := Actions.GiveHouse(10, 13, 52, 4);
  Actions.HouseAddWaresTo(H, 7, 50);
  H := Actions.GiveHouse(10, 13, 56, 4);
  Actions.HouseAddWaresTo(H, 7, 5);
  for I := 0 to 11 do
    Actions.GiveUnit(10, 0, 55, 3, 4);
  for I := 0 to 5 do
    Actions.GiveUnit(10, 9, 55, 3, 4);
  for I := 49 to 60 do
    Actions.GiveRoad(10, I, 5);
  for I := 46 to 49 do
    Actions.GiveRoad(10, I, 6);
end;


procedure OnWarriorEquipped(aU, aG: Integer);
begin
  if aU > 0 then
    if States.UnitOwner(aU) = 10 then
    begin
      if States.StatHouseTypeCount(10, 21) > 0 then
      begin
        Actions.GiveWeapons(10, 17, 1);
        Actions.GiveWeapons(10, 19, 1);
        Actions.GiveWeapons(10, 21, 1);
        Actions.GiveWeapons(10, 26, 1);
      end;
      if States.HouseAt(60, 4) > 0 then
        Actions.HouseAddWaresTo(States.HouseAt(60, 4), 7, 2);
    end;
end;


procedure UpdateAIEquipRates;
var
  Pos: TKMPoint;
  I: Integer;
begin

  Pos.X := 0;
  Pos.Y := 0;

  for I := 3 to 10 do
    Actions.AIAttackRemoveAll(I);

  case States.MissionDifficulty of

    mdEasy1: begin
               Actions.AIEquipRate(3, 0, 330);
               Actions.AIEquipRate(3, 1, 330);
               Actions.AIEquipRate(4, 0, 350);
               Actions.AIEquipRate(4, 1, 350);
               Actions.AIEquipRate(5, 0, 260);
               Actions.AIEquipRate(5, 1, 260);
               Actions.AIEquipRate(6, 0, 330);
               Actions.AIEquipRate(6, 1, 330);
               Actions.AIEquipRate(7, 0, 350);
               Actions.AIEquipRate(7, 1, 350);
               Actions.AIEquipRate(8, 0, 350);
               Actions.AIEquipRate(8, 1, 350);
               Actions.AIEquipRate(9, 0, 330);
               Actions.AIEquipRate(9, 1, 330);
             end;

    mdNormal: begin
               Actions.AIEquipRate(3, 0, 275);
               Actions.AIEquipRate(3, 1, 275);
               Actions.AIEquipRate(4, 0, 300);
               Actions.AIEquipRate(4, 1, 300);
               Actions.AIEquipRate(5, 0, 230);
               Actions.AIEquipRate(5, 1, 230);
               Actions.AIEquipRate(6, 0, 275);
               Actions.AIEquipRate(6, 1, 275);
               Actions.AIEquipRate(7, 0, 300);
               Actions.AIEquipRate(7, 1, 300);
               Actions.AIEquipRate(8, 0, 300);
               Actions.AIEquipRate(8, 1, 300);
               Actions.AIEquipRate(9, 0, 275);
               Actions.AIEquipRate(9, 1, 275);
              end;

    mdHard1: begin
               Actions.AIEquipRate(3, 0, 250);
               Actions.AIEquipRate(3, 1, 250);
               Actions.AIEquipRate(4, 0, 270);
               Actions.AIEquipRate(4, 1, 270);
               Actions.AIEquipRate(5, 0, 190);
               Actions.AIEquipRate(5, 1, 190);
               Actions.AIEquipRate(6, 0, 250);
               Actions.AIEquipRate(6, 1, 250);
               Actions.AIEquipRate(7, 0, 270);
               Actions.AIEquipRate(7, 1, 270);
               Actions.AIEquipRate(8, 0, 270);
               Actions.AIEquipRate(8, 1, 270);
               Actions.AIEquipRate(9, 0, 250);
               Actions.AIEquipRate(9, 1, 250);
             end;

    mdHard2: begin
               Actions.AIEquipRate(3, 0, 220);
               Actions.AIEquipRate(3, 1, 220);
               Actions.AIEquipRate(4, 0, 240);
               Actions.AIEquipRate(4, 1, 240);
               Actions.AIEquipRate(5, 0, 160);
               Actions.AIEquipRate(5, 1, 160);
               Actions.AIEquipRate(6, 0, 220);
               Actions.AIEquipRate(6, 1, 220);
               Actions.AIEquipRate(7, 0, 240);
               Actions.AIEquipRate(7, 1, 240);
               Actions.AIEquipRate(8, 0, 240);
               Actions.AIEquipRate(8, 1, 240);
               Actions.AIEquipRate(9, 0, 220);
               Actions.AIEquipRate(9, 1, 220);
             end;

    mdHard3: begin
               AddOutpost;
               Actions.AIEquipRate(3, 0, 180);
               Actions.AIEquipRate(3, 1, 180);
               Actions.AIEquipRate(4, 0, 200);
               Actions.AIEquipRate(4, 1, 200);
               Actions.AIEquipRate(5, 0, 120);
               Actions.AIEquipRate(5, 1, 120);
               Actions.AIEquipRate(6, 0, 180);
               Actions.AIEquipRate(6, 1, 180);
               Actions.AIEquipRate(7, 0, 200);
               Actions.AIEquipRate(7, 1, 200);
               Actions.AIEquipRate(8, 0, 200);
               Actions.AIEquipRate(8, 1, 200);
               Actions.AIEquipRate(9, 0, 180);
               Actions.AIEquipRate(9, 1, 180);
               Actions.AIEquipRate(10, 0, 150);
               Actions.AIEquipRate(10, 1, 150);
             end;

  end;

  for I := 3 to 9 do
  begin
    Actions.AIRecruitDelay(I, Utils.MaxI(FirstAttackTimer(I) - SoldiersToEquip(I) * States.AIEquipRate(I, 1), 0));
    Actions.AIAttackAdd(I, True, FirstAttackTimer(I), AttackAmount(I), 0, 0, 0, 0, True, attClosestBuildingFromStartPos, Pos);
  end;

  if States.MissionDifficulty = mdHard3 then
  begin
    Actions.AIRecruitDelay(10, Utils.MaxI(FirstAttackTimer(10) - SoldiersToEquip(10) * States.AIEquipRate(10, 1), 0));
    Actions.AIAttackAdd(10, True, FirstAttackTimer(10), AttackAmount(10), 0, 0, 0, 4, False, attClosestBuildingFromStartPos, Pos);
  end;

end;


function AttackFrequency(P: Integer): Integer;
begin
  Result := AttackAmount(P) * States.AIEquipRate(P, 1);
end;


function AttackTime(P, ID: Integer): Integer;
begin
  Result := FirstAttackTimer(P) + AttackFrequency(P) * (ID - 1);
end;


procedure UpdatePlayers;
begin
  case States.MissionDifficulty of

    mdEasy1: begin

               if States.PlayerEnabled(0) then
               begin
                 Actions.GiveGroup(0, 15, 171, 31, 4, 12, 4);
                 Actions.GiveUnit(0, 9, 159, 31, 4);
                 Actions.GiveUnit(0, 9, 163, 31, 4);
                 Actions.GiveUnit(0, 0, 161, 34, 4);
               end;

               if States.PlayerEnabled(1) then
               begin
                 Actions.GiveGroup(1, 15, 170, 106, 4, 12, 4);
                 Actions.GiveUnit(1, 9, 164, 99, 4);
                 Actions.GiveUnit(1, 9, 168, 99, 4);
                 Actions.GiveUnit(1, 0, 166, 102, 4);
               end;

               if States.PlayerEnabled(2) then
               begin
                 Actions.GiveGroup(2, 15, 165, 164, 4, 12, 4);
                 Actions.GiveUnit(2, 9, 161, 157, 4);
                 Actions.GiveUnit(2, 9, 165, 157, 4);
                 Actions.GiveUnit(2, 0, 163, 160, 4);
               end;

             end;

  end;
end;


procedure OnMissionStart;
var
  I: Integer;
begin

  Actions.PlayWAVAtLocationLooped(-1, 'Small Fall', 2.5, 32, 97, 49);
  Actions.PlayWAVAtLocationLooped(-1, 'Small Fall', 2.5, 32, 186, 79);

  SetWareDistribution;

  BlockWares;

  UpdateAIEquipRates;

  UpdatePlayers;

  FindWolves;

  for I := 0 to 2 do
    SoundAllowed[I] := True;

  Msg := False;

  Actions.ShowMsg(-1, '<$1>');

end;


procedure Message;
var
  I: Integer;
begin
  Actions.ShowMsgGoTo(-1, 107, 179, '<$2>');
  Msg := True;
  for I := 0 to 2 do
    if States.PlayerEnabled(I) then
    begin
      Actions.FogRevealCircle(I, 62, 67, 10);
      Actions.FogRevealCircle(I, 107, 179, 10);
      Actions.FogRevealCircle(I, 114, 176, 10);
      Actions.FogRevealCircle(I, 119, 171, 10);
      Actions.FogRevealCircle(I, 125, 166, 10);
      Actions.FogRevealCircle(I, 134, 166, 10);
      Actions.FogRevealCircle(I, 144, 166, 10);
    end;
end;


procedure AutoFeed(P: Integer);
var
  K: Integer;
  UnitsToFeed: array of Integer;
begin
  UnitsToFeed := States.PlayerGetAllUnits(P);
  if Length(UnitsToFeed) <= 0 then
    Exit;
  for K := Low(UnitsToFeed) to High(UnitsToFeed) do
    Actions.UnitHungerSet(UnitsToFeed[K], States.UnitMaxHunger);
end;


procedure UpdateDeposits;
begin
  Actions.MapTilesArraySetS(['1, 129, 260, -1, -1, -1', '1, 130, 260, -1, -1, -1', '1, 131, 260, -1, -1, -1', '1, 132, 260, -1, -1, -1', '1, 133, 260, -1, -1, -1', '1, 134, 260, -1, -1, -1', '1, 135, 260, -1, -1, -1', '1, 136, 260, -1, -1, -1', '1, 137, 260, -1, -1, -1', '1, 143, 307, -1, -1, -1', '1, 144, 307, -1, -1, -1', '1, 145, 307, -1, -1, -1', '1, 146, 307, -1, -1, -1', '1, 147, 307, -1, -1, -1', '1, 148, 307, -1, -1, -1', '1, 149, 307, -1, -1, -1', '1, 150, 307, -1, -1, -1', '1, 151, 307, -1, -1, -1', '1, 152, 307, -1, -1, -1', '1, 153, 307, -1, -1, -1', '1, 154, 307, -1, -1, -1', '1, 155, 307, -1, -1, -1', '1, 156, 307, -1, -1, -1', '1, 157, 307, -1, -1, -1', '1, 159, 152, -1, -1, -1', '1, 160, 152, -1, -1, -1', '1, 161, 154, -1, -1, -1', '1, 162, 154, -1, -1, -1', '1, 163, 155, -1, -1, -1', '1, 164, 155, -1, -1, -1', '1, 165, 155, -1, -1, -1', '1, 166, 155, -1, -1, -1', '1, 167, 263, -1, -1, -1', '1, 168, 263, -1, -1, -1', '1, 169, 263, -1, -1, -1', '1, 170, 263, -1, -1, -1', '1, 171, 263, -1, -1, -1', '1, 172, 155, -1, -1, -1', '1, 173, 263, -1, -1, -1', '1, 174, 263, -1, -1, -1', '1, 175, 263, -1, -1, -1', '1, 176, 155, -1, -1, -1', '1, 177, 263, -1, -1, -1', '1, 178, 263, -1, -1, -1', '1, 179, 263, -1, -1, -1', '1, 180, 263, -1, -1, -1', '1, 181, 263, -1, -1, -1', '1, 182, 263, -1, -1, -1', '1, 183, 263, -1, -1, -1', '1, 184, 263, -1, -1, -1', '1, 185, 263, -1, -1, -1', '1, 186, 263, -1, -1, -1', '1, 187, 263, -1, -1, -1', '1, 188, 263, -1, -1, -1', '1, 189, 263, -1, -1, -1', '1, 190, 263, -1, -1, -1', '1, 191, 155, -1, -1, -1', '1, 192, 155, -1, -1, -1', '1, 193, 155, -1, -1, -1', '1, 194, 155, -1, -1, -1', '1, 195, 155, -1, -1, -1', '1, 196, 155, -1, -1, -1', '1, 197, 155, -1, -1, -1', '1, 198, 154, -1, -1, -1', '1, 199, 153, -1, -1, -1', '1, 200, 152, -1, -1, -1', '1, 201, 152, -1, -1, -1', '2, 130, 260, -1, -1, -1', '2, 131, 260, -1, -1, -1', '2, 132, 260, -1, -1, -1', '2, 133, 260, -1, -1, -1', '2, 134, 260, -1, -1, -1', '2, 135, 260, -1, -1, -1', '2, 136, 260, -1, -1, -1', '2, 144, 307, -1, -1, -1', '2, 145, 307, -1, -1, -1', '2, 146, 307, -1, -1, -1', '2, 147, 307, -1, -1, -1', '2, 148, 307, -1, -1, -1', '2, 149, 307, -1, -1, -1', '2, 152, 307, -1, -1, -1', '2, 153, 307, -1, -1, -1', '2, 154, 307, -1, -1, -1', '2, 155, 307, -1, -1, -1', '2, 156, 307, -1, -1, -1', '2, 157, 307, -1, -1, -1', '2, 159, 152, -1, -1, -1', '2, 160, 153, -1, -1, -1', '2, 161, 153, -1, -1, -1', '2, 162, 154, -1, -1, -1', '2, 163, 155, -1, -1, -1', '2, 164, 155, -1, -1, -1', '2, 165, 155, -1, -1, -1', '2, 166, 155, -1, -1, -1', '2, 167, 263, -1, -1, -1', '2, 168, 263, -1, -1, -1', '2, 169, 263, -1, -1, -1', '2, 170, 263, -1, -1, -1', '2, 171, 263, -1, -1, -1', '2, 172, 263, -1, -1, -1', '2, 173, 263, -1, -1, -1', '2, 174, 263, -1, -1, -1', '2, 175, 263, -1, -1, -1', '2, 176, 263, -1, -1, -1', '2, 177, 263, -1, -1, -1', '2, 178, 263, -1, -1, -1', '2, 179, 263, -1, -1, -1', '2, 180, 263, -1, -1, -1', '2, 181, 263, -1, -1, -1', '2, 182, 263, -1, -1, -1', '2, 183, 263, -1, -1, -1', '2, 184, 263, -1, -1, -1', '2, 185, 263, -1, -1, -1', '2, 186, 263, -1, -1, -1', '2, 187, 263, -1, -1, -1', '2, 188, 263, -1, -1, -1', '2, 189, 155, -1, -1, -1', '2, 190, 155, -1, -1, -1', '2, 191, 155, -1, -1, -1', '2, 192, 155, -1, -1, -1', '2, 193, 155, -1, -1, -1', '2, 194, 155, -1, -1, -1', '2, 195, 155, -1, -1, -1', '2, 196, 155, -1, -1, -1', '2, 197, 155, -1, -1, -1', '2, 198, 154, -1, -1, -1', '2, 199, 153, -1, -1, -1', '2, 200, 152, -1, -1, -1', '3, 130, 260, -1, -1, -1', '3, 131, 260, -1, -1, -1', '3, 132, 260, -1, -1, -1', '3, 133, 260, -1, -1, -1', '3, 134, 260, -1, -1, -1', '3, 135, 260, -1, -1, -1', '3, 136, 260, -1, -1, -1', '3, 144, 307, -1, -1, -1', '3, 145, 307, -1, -1, -1', '3, 146, 307, -1, -1, -1', '3, 147, 307, -1, -1, -1', '3, 148, 307, -1, -1, -1', '3, 149, 307, -1, -1, -1', '3, 153, 307, -1, -1, -1', '3, 154, 307, -1, -1, -1', '3, 155, 307, -1, -1, -1', '3, 156, 307, -1, -1, -1', '3, 157, 307, -1, -1, -1', '3, 159, 152, -1, -1, -1', '3, 160, 153, -1, -1, -1', '3, 161, 153, -1, -1, -1', '3, 162, 154, -1, -1, -1', '3, 163, 154, -1, -1, -1', '3, 164, 155, -1, -1, -1', '3, 165, 155, -1, -1, -1', '3, 166, 155, -1, -1, -1', '3, 167, 155, -1, -1, -1', '3, 168, 263, -1, -1, -1', '3, 169, 155, -1, -1, -1', '3, 170, 263, -1, -1, -1', '3, 171, 263, -1, -1, -1', '3, 172, 155, -1, -1, -1', '3, 173, 263, -1, -1, -1', '3, 174, 263, -1, -1, -1', '3, 175, 263, -1, -1, -1', '3, 176, 155, -1, -1, -1', '3, 177, 263, -1, -1, -1', '3, 178, 263, -1, -1, -1', '3, 179, 263, -1, -1, -1', '3, 180, 155, -1, -1, -1', '3, 181, 263, -1, -1, -1', '3, 182, 263, -1, -1, -1', '3, 183, 263, -1, -1, -1', '3, 184, 263, -1, -1, -1', '3, 185, 263, -1, -1, -1', '3, 186, 263, -1, -1, -1', '3, 187, 263, -1, -1, -1', '3, 188, 263, -1, -1, -1', '3, 189, 263, -1, -1, -1', '3, 190, 155, -1, -1, -1', '3, 191, 155, -1, -1, -1', '3, 192, 155, -1, -1, -1', '3, 193, 155, -1, -1, -1', '3, 194, 155, -1, -1, -1', '3, 195, 155, -1, -1, -1', '3, 196, 155, -1, -1, -1', '3, 197, 154, -1, -1, -1', '3, 198, 154, -1, -1, -1', '3, 199, 153, -1, -1, -1', '3, 200, 152, -1, -1, -1', '4, 129, 260, -1, -1, -1', '4, 130, 260, -1, -1, -1', '4, 131, 260, -1, -1, -1', '4, 132, 260, -1, -1, -1', '4, 133, 260, -1, -1, -1', '4, 134, 260, -1, -1, -1', '4, 135, 260, -1, -1, -1', '4, 136, 260, -1, -1, -1', '4, 143, 307, -1, -1, -1', '4, 144, 307, -1, -1, -1', '4, 145, 307, -1, -1, -1', '4, 146, 307, -1, -1, -1', '4, 147, 307, -1, -1, -1', '4, 148, 307, -1, -1, -1', '4, 149, 307, -1, -1, -1', '4, 153, 307, -1, -1, -1', '4, 154, 307, -1, -1, -1', '4, 155, 307, -1, -1, -1', '4, 156, 307, -1, -1, -1', '4, 159, 152, -1, -1, -1', '4, 160, 153, -1, -1, -1', '4, 161, 153, -1, -1, -1', '4, 162, 154, -1, -1, -1', '4, 163, 154, -1, -1, -1', '4, 164, 155, -1, -1, -1', '4, 165, 155, -1, -1, -1', '4, 166, 155, -1, -1, -1', '4, 167, 155, -1, -1, -1', '4, 168, 263, -1, -1, -1', '4, 169, 263, -1, -1, -1', '4, 170, 263, -1, -1, -1', '4, 171, 155, -1, -1, -1', '4, 172, 155, -1, -1, -1', '4, 173, 155, -1, -1, -1', '4, 174, 155, -1, -1, -1', '4, 175, 263, -1, -1, -1', '4, 176, 263, -1, -1, -1', '4, 177, 263, -1, -1, -1', '4, 178, 155, -1, -1, -1', '4, 179, 263, -1, -1, -1', '4, 180, 263, -1, -1, -1', '4, 181, 263, -1, -1, -1', '4, 182, 263, -1, -1, -1', '4, 183, 263, -1, -1, -1', '4, 184, 263, -1, -1, -1', '4, 185, 263, -1, -1, -1', '4, 186, 263, -1, -1, -1', '4, 187, 263, -1, -1, -1', '4, 188, 263, -1, -1, -1', '4, 189, 263, -1, -1, -1', '4, 190, 155, -1, -1, -1', '4, 191, 155, -1, -1, -1', '4, 192, 155, -1, -1, -1', '4, 193, 155, -1, -1, -1', '4, 194, 155, -1, -1, -1', '4, 195, 155, -1, -1, -1', '4, 196, 155, -1, -1, -1', '4, 197, 154, -1, -1, -1', '4, 198, 153, -1, -1, -1', '4, 199, 152, -1, -1, -1', '4, 200, 152, -1, -1, -1', '5, 128, 260, -1, -1, -1', '5, 129, 260, -1, -1, -1', '5, 130, 260, -1, -1, -1', '5, 131, 260, -1, -1, -1', '5, 132, 260, -1, -1, -1', '5, 133, 260, -1, -1, -1', '5, 134, 260, -1, -1, -1', '5, 135, 260, -1, -1, -1', '5, 136, 260, -1, -1, -1', '5, 144, 307, -1, -1, -1', '5, 145, 307, -1, -1, -1', '5, 146, 307, -1, -1, -1', '5, 147, 307, -1, -1, -1', '5, 148, 307, -1, -1, -1', '5, 149, 307, -1, -1, -1', '5, 154, 307, -1, -1, -1', '5, 155, 307, -1, -1, -1', '5, 156, 307, -1, -1, -1', '5, 159, 152, -1, -1, -1', '5, 160, 153, -1, -1, -1', '5, 161, 153, -1, -1, -1', '5, 162, 154, -1, -1, -1', '5, 163, 154, -1, -1, -1', '5, 164, 154, -1, -1, -1', '5, 165, 155, -1, -1, -1', '5, 166, 155, -1, -1, -1', '5, 167, 155, -1, -1, -1', '5, 168, 155, -1, -1, -1', '5, 169, 155, -1, -1, -1', '5, 170, 155, -1, -1, -1', '5, 171, 155, -1, -1, -1', '5, 172, 155, -1, -1, -1', '5, 173, 155, -1, -1, -1', '5, 174, 155, -1, -1, -1', '5, 175, 155, -1, -1, -1', '5, 176, 155, -1, -1, -1', '5, 177, 155, -1, -1, -1', '5, 178, 263, -1, -1, -1', '5, 179, 263, -1, -1, -1', '5, 180, 263, -1, -1, -1', '5, 181, 263, -1, -1, -1', '5, 182, 263, -1, -1, -1', '5, 183, 263, -1, -1, -1', '5, 184, 263, -1, -1, -1', '5, 185, 263, -1, -1, -1', '5, 186, 263, -1, -1, -1', '5, 187, 263, -1, -1, -1', '5, 188, 263, -1, -1, -1', '5, 189, 263, -1, -1, -1', '5, 190, 263, -1, -1, -1', '5, 191, 155, -1, -1, -1', '5, 192, 155, -1, -1, -1', '5, 193, 155, -1, -1, -1', '5, 194, 155, -1, -1, -1', '5, 195, 155, -1, -1, -1', '5, 196, 155, -1, -1, -1', '5, 197, 154, -1, -1, -1', '5, 198, 153, -1, -1, -1', '5, 199, 152, -1, -1, -1', '6, 127, 260, -1, -1, -1', '6, 128, 260, -1, -1, -1', '6, 129, 260, -1, -1, -1', '6, 130, 260, -1, -1, -1', '6, 131, 260, -1, -1, -1', '6, 132, 260, -1, -1, -1', '6, 133, 260, -1, -1, -1', '6, 134, 260, -1, -1, -1', '6, 146, 307, -1, -1, -1', '6, 147, 307, -1, -1, -1', '6, 148, 307, -1, -1, -1', '6, 154, 307, -1, -1, -1', '6, 155, 307, -1, -1, -1', '6, 156, 307, -1, -1, -1', '6, 159, 152, -1, -1, -1', '6, 160, 152, -1, -1, -1', '6, 161, 153, -1, -1, -1', '6, 162, 154, -1, -1, -1', '6, 163, 154, -1, -1, -1', '6, 164, 154, -1, -1, -1', '6, 165, 154, -1, -1, -1', '6, 166, 155, -1, -1, -1', '6, 167, 155, -1, -1, -1', '6, 168, 155, -1, -1, -1', '6, 169, 155, -1, -1, -1', '6, 170, 155, -1, -1, -1', '6, 171, 154, -1, -1, -1', '6, 172, 155, -1, -1, -1', '6, 173, 155, -1, -1, -1', '6, 174, 155, -1, -1, -1', '6, 175, 155, -1, -1, -1', '6, 176, 155, -1, -1, -1', '6, 177, 155, -1, -1, -1', '6, 178, 155, -1, -1, -1', '6, 179, 155, -1, -1, -1', '6, 180, 263, -1, -1, -1', '6, 181, 263, -1, -1, -1', '6, 182, 263, -1, -1, -1', '6, 183, 155, -1, -1, -1', '6, 184, 155, -1, -1, -1', '6, 185, 263, -1, -1, -1', '6, 186, 263, -1, -1, -1', '6, 187, 263, -1, -1, -1', '6, 188, 263, -1, -1, -1', '6, 189, 263, -1, -1, -1', '6, 190, 263, -1, -1, -1', '6, 191, 155, -1, -1, -1', '6, 192, 155, -1, -1, -1', '6, 193, 155, -1, -1, -1', '6, 194, 155, -1, -1, -1', '6, 195, 155, -1, -1, -1', '6, 196, 154, -1, -1, -1', '6, 197, 154, -1, -1, -1', '6, 198, 153, -1, -1, -1', '6, 199, 152, -1, -1, -1', '7, 128, 260, -1, -1, -1', '7, 129, 260, -1, -1, -1', '7, 130, 260, -1, -1, -1', '7, 131, 260, -1, -1, -1', '7, 132, 260, -1, -1, -1', '7, 133, 260, -1, -1, -1', '7, 134, 260, -1, -1, -1', '7, 146, 307, -1, -1, -1', '7, 147, 307, -1, -1, -1', '7, 155, 307, -1, -1, -1', '7, 156, 307, -1, -1, -1', '7, 160, 152, -1, -1, -1', '7, 161, 153, -1, -1, -1', '7, 162, 153, -1, -1, -1', '7, 163, 154, -1, -1, -1', '7, 164, 154, -1, -1, -1', '7, 165, 154, -1, -1, -1', '7, 166, 154, -1, -1, -1', '7, 167, 155, -1, -1, -1', '7, 168, 155, -1, -1, -1', '7, 169, 154, -1, -1, -1', '7, 170, 154, -1, -1, -1', '7, 171, 154, -1, -1, -1', '7, 172, 154, -1, -1, -1', '7, 173, 154, -1, -1, -1', '7, 174, 155, -1, -1, -1', '7, 175, 155, -1, -1, -1', '7, 176, 155, -1, -1, -1', '7, 177, 155, -1, -1, -1', '7, 178, 155, -1, -1, -1', '7, 179, 155, -1, -1, -1', '7, 180, 155, -1, -1, -1', '7, 181, 155, -1, -1, -1', '7, 182, 263, -1, -1, -1', '7, 183, 263, -1, -1, -1', '7, 184, 155, -1, -1, -1', '7, 185, 263, -1, -1, -1', '7, 186, 263, -1, -1, -1', '7, 187, 263, -1, -1, -1', '7, 188, 263, -1, -1, -1', '7, 189, 263, -1, -1, -1', '7, 190, 263, -1, -1, -1', '7, 191, 155, -1, -1, -1', '7, 192, 155, -1, -1, -1', '7, 193, 155, -1, -1, -1', '7, 194, 155, -1, -1, -1', '7, 195, 155, -1, -1, -1', '7, 196, 154, -1, -1, -1', '7, 197, 153, -1, -1, -1', '7, 198, 152, -1, -1, -1', '8, 128, 260, -1, -1, -1', '8, 129, 260, -1, -1, -1', '8, 130, 260, -1, -1, -1', '8, 131, 260, -1, -1, -1', '8, 132, 260, -1, -1, -1', '8, 133, 260, -1, -1, -1', '8, 134, 260, -1, -1, -1', '8, 145, 307, -1, -1, -1', '8, 146, 307, -1, -1, -1', '8, 147, 307, -1, -1, -1', '8, 160, 152, -1, -1, -1', '8, 161, 152, -1, -1, -1', '8, 162, 152, -1, -1, -1', '8, 163, 153, -1, -1, -1', '8, 164, 154, -1, -1, -1', '8, 165, 154, -1, -1, -1', '8, 166, 154, -1, -1, -1', '8, 167, 154, -1, -1, -1', '8, 168, 154, -1, -1, -1', '8, 169, 154, -1, -1, -1', '8, 170, 154, -1, -1, -1', '8, 171, 154, -1, -1, -1', '8, 172, 154, -1, -1, -1', '8, 173, 154, -1, -1, -1', '8, 174, 154, -1, -1, -1', '8, 175, 154, -1, -1, -1', '8, 176, 155, -1, -1, -1', '8, 177, 155, -1, -1, -1', '8, 178, 155, -1, -1, -1', '8, 179, 155, -1, -1, -1', '8, 180, 155, -1, -1, -1', '8, 181, 155, -1, -1, -1', '8, 182, 155, -1, -1, -1', '8, 183, 155, -1, -1, -1', '8, 184, 263, -1, -1, -1', '8, 185, 263, -1, -1, -1', '8, 186, 155, -1, -1, -1', '8, 187, 263, -1, -1, -1', '8, 188, 263, -1, -1, -1', '8, 189, 155, -1, -1, -1', '8, 190, 263, -1, -1, -1', '8, 191, 263, -1, -1, -1', '8, 192, 155, -1, -1, -1', '8, 193, 155, -1, -1, -1', '8, 194, 155, -1, -1, -1', '8, 195, 154, -1, -1, -1', '8, 196, 154, -1, -1, -1', '8, 197, 153, -1, -1, -1', '8, 198, 152, -1, -1, -1', '9, 128, 260, -1, -1, -1', '9, 129, 260, -1, -1, -1', '9, 130, 260, -1, -1, -1', '9, 131, 260, -1, -1, -1', '9, 132, 260, -1, -1, -1', '9, 133, 260, -1, -1, -1', '9, 134, 260, -1, -1, -1', '9, 146, 307, -1, -1, -1', '9, 161, 152, -1, -1, -1', '9, 162, 152, -1, -1, -1', '9, 163, 153, -1, -1, -1', '9, 164, 154, -1, -1, -1', '9, 165, 154, -1, -1, -1', '9, 166, 154, -1, -1, -1', '9, 167, 154, -1, -1, -1', '9, 168, 154, -1, -1, -1', '9, 169, 153, -1, -1, -1', '9, 170, 153, -1, -1, -1', '9, 171, 152, -1, -1, -1', '9, 172, 153, -1, -1, -1', '9, 173, 153, -1, -1, -1', '9, 174, 152, -1, -1, -1', '9, 175, 154, -1, -1, -1', '9, 176, 154, -1, -1, -1', '9, 177, 154, -1, -1, -1', '9, 178, 155, -1, -1, -1', '9, 179, 155, -1, -1, -1', '9, 180, 155, -1, -1, -1', '9, 181, 155, -1, -1, -1', '9, 182, 155, -1, -1, -1', '9, 183, 155, -1, -1, -1', '9, 184, 263, -1, -1, -1', '9, 185, 263, -1, -1, -1', '9, 186, 155, -1, -1, -1', '9, 187, 155, -1, -1, -1', '9, 188, 155, -1, -1, -1', '9, 189, 263, -1, -1, -1', '9, 190, 263, -1, -1, -1', '9, 191, 263, -1, -1, -1', '9, 192, 155, -1, -1, -1', '9, 193, 155, -1, -1, -1', '9, 194, 155, -1, -1, -1', '9, 195, 154, -1, -1, -1', '9, 196, 153, -1, -1, -1', '9, 197, 153, -1, -1, -1', '9, 198, 152, -1, -1, -1', '10, 127, 260, -1, -1, -1', '10, 128, 260, -1, -1, -1', '10, 129, 260, -1, -1, -1', '10, 130, 260, -1, -1, -1', '10, 131, 260, -1, -1, -1', '10, 132, 260, -1, -1, -1', '10, 133, 260, -1, -1, -1', '10, 134, 260, -1, -1, -1', '10, 162, 152, -1, -1, -1', '10, 163, 152, -1, -1, -1', '10, 164, 153, -1, -1, -1', '10, 165, 154, -1, -1, -1', '10, 166, 154, -1, -1, -1', '10, 167, 153, -1, -1, -1', '10, 168, 153, -1, -1, -1', '10, 169, 153, -1, -1, -1', '10, 170, 153, -1, -1, -1', '10, 171, 153, -1, -1, -1', '10, 172, 153, -1, -1, -1', '10, 173, 153, -1, -1, -1', '10, 174, 153, -1, -1, -1', '10, 175, 152, -1, -1, -1', '10, 176, 154, -1, -1, -1', '10, 177, 154, -1, -1, -1', '10, 178, 154, -1, -1, -1', '10, 179, 154, -1, -1, -1', '10, 180, 154, -1, -1, -1', '10, 181, 155, -1, -1, -1', '10, 182, 155, -1, -1, -1', '10, 183, 155, -1, -1, -1', '10, 184, 155, -1, -1, -1', '10, 185, 263, -1, -1, -1', '10, 186, 263, -1, -1, -1', '10, 187, 263, -1, -1, -1', '10, 188, 155, -1, -1, -1', '10, 189, 155, -1, -1, -1', '10, 190, 263, -1, -1, -1', '10, 191, 155, -1, -1, -1', '10, 192, 155, -1, -1, -1', '10, 193, 155, -1, -1, -1', '10, 194, 154, -1, -1, -1', '10, 195, 154, -1, -1, -1', '10, 196, 153, -1, -1, -1', '10, 197, 152, -1, -1, -1', '10, 198, 152, -1, -1, -1', '11, 127, 260, -1, -1, -1', '11, 128, 260, -1, -1, -1', '11, 129, 260, -1, -1, -1', '11, 130, 260, -1, -1, -1', '11, 131, 260, -1, -1, -1', '11, 132, 260, -1, -1, -1', '11, 133, 260, -1, -1, -1', '11, 134, 260, -1, -1, -1', '11, 135, 260, -1, -1, -1', '11, 136, 260, -1, -1, -1', '11, 162, 152, -1, -1, -1', '11, 163, 153, -1, -1, -1', '11, 164, 153, -1, -1, -1', '11, 165, 154, -1, -1, -1', '11, 166, 153, -1, -1, -1', '11, 167, 153, -1, -1, -1', '11, 168, 153, -1, -1, -1', '11, 169, 153, -1, -1, -1', '11, 170, 152, -1, -1, -1', '11, 171, 152, -1, -1, -1', '11, 172, 152, -1, -1, -1', '11, 173, 152, -1, -1, -1', '11, 174, 153, -1, -1, -1', '11, 175, 153, -1, -1, -1', '11, 176, 153, -1, -1, -1', '11, 177, 153, -1, -1, -1', '11, 178, 153, -1, -1, -1', '11, 179, 153, -1, -1, -1', '11, 180, 154, -1, -1, -1', '11, 181, 155, -1, -1, -1', '11, 182, 155, -1, -1, -1', '11, 183, 155, -1, -1, -1', '11, 184, 155, -1, -1, -1', '11, 185, 155, -1, -1, -1', '11, 186, 155, -1, -1, -1', '11, 187, 263, -1, -1, -1', '11, 188, 263, -1, -1, -1', '11, 189, 263, -1, -1, -1', '11, 190, 263, -1, -1, -1', '11, 191, 155, -1, -1, -1', '11, 192, 155, -1, -1, -1', '11, 193, 155, -1, -1, -1', '11, 194, 154, -1, -1, -1', '11, 195, 153, -1, -1, -1', '11, 196, 153, -1, -1, -1', '11, 197, 152, -1, -1, -1', '12, 127, 260, -1, -1, -1', '12, 128, 260, -1, -1, -1', '12, 129, 260, -1, -1, -1', '12, 130, 260, -1, -1, -1', '12, 131, 260, -1, -1, -1', '12, 132, 260, -1, -1, -1', '12, 133, 260, -1, -1, -1', '12, 134, 260, -1, -1, -1', '12, 135, 260, -1, -1, -1', '12, 136, 260, -1, -1, -1', '12, 137, 260, -1, -1, -1', '12, 163, 152, -1, -1, -1', '12, 164, 153, -1, -1, -1', '12, 165, 153, -1, -1, -1', '12, 166, 153, -1, -1, -1', '12, 167, 153, -1, -1, -1', '12, 168, 153, -1, -1, -1', '12, 169, 152, -1, -1, -1', '12, 170, 152, -1, -1, -1', '12, 174, 152, -1, -1, -1', '12, 175, 152, -1, -1, -1', '12, 176, 153, -1, -1, -1', '12, 177, 153, -1, -1, -1', '12, 178, 153, -1, -1, -1', '12, 179, 153, -1, -1, -1', '12, 180, 153, -1, -1, -1', '12, 181, 154, -1, -1, -1', '12, 182, 155, -1, -1, -1', '12, 183, 155, -1, -1, -1', '12, 184, 155, -1, -1, -1', '12, 185, 155, -1, -1, -1', '12, 186, 155, -1, -1, -1', '12, 187, 155, -1, -1, -1', '12, 188, 155, -1, -1, -1', '12, 189, 155, -1, -1, -1', '12, 190, 155, -1, -1, -1', '12, 191, 263, -1, -1, -1', '12, 192, 155, -1, -1, -1', '12, 193, 154, -1, -1, -1', '12, 194, 154, -1, -1, -1', '12, 195, 153, -1, -1, -1', '12, 196, 152, -1, -1, -1', '12, 197, 152, -1, -1, -1', '13, 129, 260, -1, -1, -1', '13, 130, 260, -1, -1, -1', '13, 131, 260, -1, -1, -1', '13, 132, 260, -1, -1, -1', '13, 133, 260, -1, -1, -1', '13, 134, 260, -1, -1, -1', '13, 135, 260, -1, -1, -1', '13, 136, 260, -1, -1, -1', '13, 137, 260, -1, -1, -1', '13, 163, 152, -1, -1, -1', '13, 164, 152, -1, -1, -1', '13, 165, 153, -1, -1, -1', '13, 166, 153, -1, -1, -1', '13, 167, 152, -1, -1, -1', '13, 168, 152, -1, -1, -1', '13, 169, 152, -1, -1, -1', '13, 175, 152, -1, -1, -1', '13, 176, 152, -1, -1, -1', '13, 177, 152, -1, -1, -1', '13, 178, 153, -1, -1, -1', '13, 179, 153, -1, -1, -1', '13, 180, 153, -1, -1, -1', '13, 181, 154, -1, -1, -1', '13, 182, 154, -1, -1, -1', '13, 183, 154, -1, -1, -1', '13, 184, 155, -1, -1, -1', '13, 185, 155, -1, -1, -1', '13, 186, 155, -1, -1, -1', '13, 187, 155, -1, -1, -1', '13, 188, 155, -1, -1, -1', '13, 189, 155, -1, -1, -1', '13, 190, 155, -1, -1, -1', '13, 191, 155, -1, -1, -1', '13, 192, 154, -1, -1, -1', '13, 193, 154, -1, -1, -1', '13, 194, 153, -1, -1, -1', '13, 195, 153, -1, -1, -1', '13, 196, 152, -1, -1, -1', '13, 197, 152, -1, -1, -1', '14, 129, 260, -1, -1, -1', '14, 130, 260, -1, -1, -1', '14, 131, 260, -1, -1, -1', '14, 132, 260, -1, -1, -1', '14, 133, 260, -1, -1, -1', '14, 134, 260, -1, -1, -1', '14, 135, 151, -1, -1, -1', '14, 136, 260, -1, -1, -1', '14, 137, 260, -1, -1, -1', '14, 164, 152, -1, -1, -1', '14, 165, 152, -1, -1, -1', '14, 166, 152, -1, -1, -1', '14, 167, 152, -1, -1, -1', '14, 177, 152, -1, -1, -1', '14, 178, 152, -1, -1, -1', '14, 179, 152, -1, -1, -1', '14, 180, 153, -1, -1, -1', '14, 181, 153, -1, -1, -1', '14, 182, 154, -1, -1, -1', '14, 183, 154, -1, -1, -1', '14, 184, 154, -1, -1, -1', '14, 185, 155, -1, -1, -1', '14, 186, 155, -1, -1, -1', '14, 187, 155, -1, -1, -1', '14, 188, 155, -1, -1, -1', '14, 189, 155, -1, -1, -1', '14, 190, 155, -1, -1, -1', '14, 191, 155, -1, -1, -1', '14, 192, 154, -1, -1, -1', '14, 193, 154, -1, -1, -1', '14, 194, 153, -1, -1, -1', '14, 195, 152, -1, -1, -1', '14, 196, 152, -1, -1, -1', '15, 130, 260, -1, -1, -1', '15, 131, 260, -1, -1, -1', '15, 132, 260, -1, -1, -1', '15, 133, 260, -1, -1, -1', '15, 134, 260, -1, -1, -1', '15, 135, 260, -1, -1, -1', '15, 136, 260, -1, -1, -1', '15, 137, 260, -1, -1, -1', '15, 180, 152, -1, -1, -1', '15, 181, 153, -1, -1, -1', '15, 182, 153, -1, -1, -1', '15, 183, 154, -1, -1, -1', '15, 184, 154, -1, -1, -1', '15, 185, 154, -1, -1, -1', '15, 186, 154, -1, -1, -1', '15, 187, 155, -1, -1, -1', '15, 188, 155, -1, -1, -1', '15, 189, 155, -1, -1, -1', '15, 190, 155, -1, -1, -1', '15, 191, 153, -1, -1, -1', '15, 192, 154, -1, -1, -1', '15, 193, 152, -1, -1, -1', '15, 194, 153, -1, -1, -1', '15, 195, 152, -1, -1, -1', '16, 131, 260, -1, -1, -1', '16, 132, 260, -1, -1, -1', '16, 133, 260, -1, -1, -1', '16, 134, 260, -1, -1, -1', '16, 135, 260, -1, -1, -1', '16, 136, 260, -1, -1, -1', '16, 176, 260, -1, -1, -1', '16, 177, 260, -1, -1, -1', '16, 180, 152, -1, -1, -1', '16, 181, 152, -1, -1, -1', '16, 182, 153, -1, -1, -1', '16, 183, 153, -1, -1, -1', '16, 184, 153, -1, -1, -1', '16, 185, 154, -1, -1, -1', '16, 186, 155, -1, -1, -1', '16, 187, 154, -1, -1, -1', '16, 188, 154, -1, -1, -1', '16, 189, 155, -1, -1, -1', '16, 190, 155, -1, -1, -1', '16, 191, 154, -1, -1, -1', '16, 192, 154, -1, -1, -1', '16, 193, 153, -1, -1, -1', '16, 194, 152, -1, -1, -1', '16, 195, 152, -1, -1, -1', '17, 132, 260, -1, -1, -1', '17, 133, 260, -1, -1, -1', '17, 134, 151, -1, -1, -1', '17, 135, 260, -1, -1, -1', '17, 136, 260, -1, -1, -1', '17, 176, 260, -1, -1, -1', '17, 177, 260, -1, -1, -1', '17, 178, 260, -1, -1, -1', '17, 181, 152, -1, -1, -1', '17, 182, 153, -1, -1, -1', '17, 183, 153, -1, -1, -1', '17, 184, 153, -1, -1, -1', '17, 185, 153, -1, -1, -1', '17, 186, 153, -1, -1, -1', '17, 187, 153, -1, -1, -1', '17, 188, 154, -1, -1, -1', '17, 189, 154, -1, -1, -1', '17, 190, 154, -1, -1, -1', '17, 191, 154, -1, -1, -1', '17, 192, 153, -1, -1, -1', '17, 193, 153, -1, -1, -1', '17, 194, 152, -1, -1, -1', '17, 195, 152, -1, -1, -1', '18, 134, 260, -1, -1, -1', '18, 135, 151, -1, -1, -1', '18, 136, 151, -1, -1, -1', '18, 175, 260, -1, -1, -1', '18, 176, 260, -1, -1, -1', '18, 177, 260, -1, -1, -1', '18, 178, 260, -1, -1, -1', '18, 181, 152, -1, -1, -1', '18, 182, 152, -1, -1, -1', '18, 183, 153, -1, -1, -1', '18, 184, 153, -1, -1, -1', '18, 185, 153, -1, -1, -1', '18, 186, 153, -1, -1, -1', '18, 187, 153, -1, -1, -1', '18, 188, 153, -1, -1, -1', '18, 189, 154, -1, -1, -1', '18, 190, 154, -1, -1, -1', '18, 191, 154, -1, -1, -1', '18, 192, 153, -1, -1, -1', '18, 193, 152, -1, -1, -1', '18, 194, 152, -1, -1, -1', '19, 135, 260, -1, -1, -1', '19, 136, 260, -1, -1, -1', '19, 149, 307, -1, -1, -1', '19, 150, 307, -1, -1, -1', '19, 175, 260, -1, -1, -1', '19, 176, 260, -1, -1, -1', '19, 177, 260, -1, -1, -1', '19, 178, 260, -1, -1, -1', '19, 179, 260, -1, -1, -1', '19, 182, 152, -1, -1, -1', '19, 183, 153, -1, -1, -1', '19, 184, 152, -1, -1, -1', '19, 185, 152, -1, -1, -1', '19, 186, 152, -1, -1, -1', '19, 187, 153, -1, -1, -1', '19, 188, 153, -1, -1, -1', '19, 189, 153, -1, -1, -1', '19, 190, 153, -1, -1, -1', '19, 191, 154, -1, -1, -1', '19, 192, 153, -1, -1, -1', '19, 193, 153, -1, -1, -1', '19, 194, 152, -1, -1, -1', '20, 135, 151, -1, -1, -1', '20, 147, 307, -1, -1, -1', '20, 148, 307, -1, -1, -1', '20, 149, 307, -1, -1, -1', '20, 150, 307, -1, -1, -1', '20, 175, 260, -1, -1, -1', '20, 176, 260, -1, -1, -1', '20, 177, 260, -1, -1, -1', '20, 178, 260, -1, -1, -1', '20, 179, 260, -1, -1, -1', '20, 182, 152, -1, -1, -1', '20, 183, 152, -1, -1, -1', '20, 184, 152, -1, -1, -1', '20, 185, 152, -1, -1, -1', '20, 186, 152, -1, -1, -1', '20, 187, 152, -1, -1, -1', '20, 188, 152, -1, -1, -1', '20, 189, 153, -1, -1, -1', '20, 190, 153, -1, -1, -1', '20, 191, 152, -1, -1, -1', '20, 192, 153, -1, -1, -1', '20, 193, 152, -1, -1, -1', '20, 194, 152, -1, -1, -1', '21, 146, 307, -1, -1, -1', '21, 147, 307, -1, -1, -1', '21, 148, 307, -1, -1, -1', '21, 149, 307, -1, -1, -1', '21, 150, 307, -1, -1, -1', '21, 151, 307, -1, -1, -1', '21, 175, 260, -1, -1, -1', '21, 176, 260, -1, -1, -1', '21, 177, 260, -1, -1, -1', '21, 178, 260, -1, -1, -1', '21, 179, 260, -1, -1, -1', '21, 185, 152, -1, -1, -1', '21, 186, 152, -1, -1, -1', '21, 187, 152, -1, -1, -1', '21, 188, 152, -1, -1, -1', '21, 189, 152, -1, -1, -1', '21, 190, 152, -1, -1, -1', '21, 191, 153, -1, -1, -1', '21, 192, 153, -1, -1, -1', '21, 193, 152, -1, -1, -1', '22, 146, 307, -1, -1, -1', '22, 147, 307, -1, -1, -1', '22, 148, 307, -1, -1, -1', '22, 149, 307, -1, -1, -1', '22, 150, 307, -1, -1, -1', '22, 151, 307, -1, -1, -1', '22, 173, 260, -1, -1, -1', '22, 174, 260, -1, -1, -1', '22, 175, 260, -1, -1, -1', '22, 176, 260, -1, -1, -1', '22, 177, 260, -1, -1, -1', '22, 178, 260, -1, -1, -1', '22, 179, 260, -1, -1, -1', '22, 186, 152, -1, -1, -1', '22, 189, 152, -1, -1, -1', '22, 190, 152, -1, -1, -1', '22, 191, 153, -1, -1, -1', '22, 192, 152, -1, -1, -1', '22, 193, 152, -1, -1, -1', '23, 145, 307, -1, -1, -1', '23, 146, 307, -1, -1, -1', '23, 147, 307, -1, -1, -1', '23, 148, 307, -1, -1, -1', '23, 149, 307, -1, -1, -1', '23, 150, 307, -1, -1, -1', '23, 151, 307, -1, -1, -1', '23, 173, 260, -1, -1, -1', '23, 174, 260, -1, -1, -1', '23, 175, 260, -1, -1, -1', '23, 176, 260, -1, -1, -1', '23, 177, 260, -1, -1, -1', '23, 178, 260, -1, -1, -1', '23, 179, 260, -1, -1, -1', '23, 180, 260, -1, -1, -1', '23, 189, 152, -1, -1, -1', '23, 190, 152, -1, -1, -1', '23, 191, 153, -1, -1, -1', '23, 192, 152, -1, -1, -1', '24, 144, 307, -1, -1, -1', '24, 145, 307, -1, -1, -1', '24, 146, 307, -1, -1, -1', '24, 147, 307, -1, -1, -1', '24, 148, 307, -1, -1, -1', '24, 149, 307, -1, -1, -1', '24, 150, 307, -1, -1, -1', '24, 173, 260, -1, -1, -1', '24, 174, 260, -1, -1, -1', '24, 175, 260, -1, -1, -1', '24, 176, 260, -1, -1, -1', '24, 177, 260, -1, -1, -1', '24, 178, 260, -1, -1, -1', '24, 179, 260, -1, -1, -1', '24, 180, 260, -1, -1, -1', '24, 181, 260, -1, -1, -1', '24, 190, 152, -1, -1, -1', '24, 191, 152, -1, -1, -1', '24, 192, 152, -1, -1, -1', '25, 144, 307, -1, -1, -1', '25, 145, 307, -1, -1, -1', '25, 146, 307, -1, -1, -1', '25, 147, 307, -1, -1, -1', '25, 148, 307, -1, -1, -1', '25, 149, 307, -1, -1, -1', '25, 150, 307, -1, -1, -1', '25, 173, 260, -1, -1, -1', '25, 174, 260, -1, -1, -1', '25, 175, 260, -1, -1, -1', '25, 176, 260, -1, -1, -1', '25, 177, 260, -1, -1, -1', '25, 178, 151, -1, -1, -1', '25, 179, 260, -1, -1, -1', '25, 180, 260, -1, -1, -1', '25, 181, 260, -1, -1, -1', '25, 190, 152, -1, -1, -1', '25, 191, 152, -1, -1, -1', '25, 192, 152, -1, -1, -1', '26, 145, 307, -1, -1, -1', '26, 146, 307, -1, -1, -1', '26, 147, 307, -1, -1, -1', '26, 148, 307, -1, -1, -1', '26, 149, 307, -1, -1, -1', '26, 150, 307, -1, -1, -1', '26, 172, 260, -1, -1, -1', '26, 173, 260, -1, -1, -1', '26, 174, 260, -1, -1, -1', '26, 175, 260, -1, -1, -1', '26, 176, 260, -1, -1, -1', '26, 177, 260, -1, -1, -1', '26, 178, 151, -1, -1, -1', '26, 179, 260, -1, -1, -1', '26, 180, 260, -1, -1, -1', '26, 181, 260, -1, -1, -1', '26, 190, 152, -1, -1, -1', '26, 191, 152, -1, -1, -1', '26, 192, 152, -1, -1, -1', '27, 147, 307, -1, -1, -1', '27, 148, 307, -1, -1, -1', '27, 149, 307, -1, -1, -1', '27, 150, 307, -1, -1, -1', '27, 172, 260, -1, -1, -1', '27, 173, 260, -1, -1, -1', '27, 174, 260, -1, -1, -1', '27, 175, 260, -1, -1, -1', '27, 176, 260, -1, -1, -1', '27, 177, 260, -1, -1, -1', '27, 178, 151, -1, -1, -1', '27, 179, 260, -1, -1, -1', '27, 180, 260, -1, -1, -1', '27, 181, 260, -1, -1, -1', '28, 149, 307, -1, -1, -1', '28, 150, 307, -1, -1, -1', '28, 171, 260, -1, -1, -1', '28, 172, 260, -1, -1, -1', '28, 173, 260, -1, -1, -1', '28, 174, 260, -1, -1, -1', '28, 175, 260, -1, -1, -1', '28, 176, 260, -1, -1, -1', '28, 177, 260, -1, -1, -1', '28, 178, 260, -1, -1, -1', '28, 179, 260, -1, -1, -1', '29, 170, 260, -1, -1, -1', '29, 171, 260, -1, -1, -1', '29, 172, 260, -1, -1, -1', '29, 173, 260, -1, -1, -1', '29, 174, 260, -1, -1, -1', '29, 175, 260, -1, -1, -1', '29, 176, 260, -1, -1, -1', '29, 177, 260, -1, -1, -1', '29, 178, 260, -1, -1, -1', '29, 179, 260, -1, -1, -1', '30, 170, 260, -1, -1, -1', '30, 171, 260, -1, -1, -1', '30, 172, 260, -1, -1, -1', '30, 173, 260, -1, -1, -1', '30, 174, 260, -1, -1, -1', '30, 175, 260, -1, -1, -1', '30, 176, 260, -1, -1, -1', '30, 177, 260, -1, -1, -1', '30, 178, 260, -1, -1, -1', '30, 179, 260, -1, -1, -1', '31, 171, 260, -1, -1, -1', '31, 172, 260, -1, -1, -1', '31, 173, 260, -1, -1, -1', '31, 174, 260, -1, -1, -1', '31, 175, 260, -1, -1, -1', '31, 176, 151, -1, -1, -1', '31, 177, 260, -1, -1, -1', '31, 178, 151, -1, -1, -1', '31, 179, 260, -1, -1, -1', '32, 172, 260, -1, -1, -1', '32, 173, 260, -1, -1, -1', '32, 174, 260, -1, -1, -1', '32, 175, 260, -1, -1, -1', '32, 176, 151, -1, -1, -1', '32, 177, 151, -1, -1, -1', '32, 178, 151, -1, -1, -1', '32, 179, 260, -1, -1, -1', '33, 172, 260, -1, -1, -1', '33, 173, 260, -1, -1, -1', '33, 174, 260, -1, -1, -1', '33, 175, 260, -1, -1, -1', '33, 176, 260, -1, -1, -1', '33, 177, 151, -1, -1, -1', '33, 178, 151, -1, -1, -1', '33, 179, 260, -1, -1, -1', '34, 173, 260, -1, -1, -1', '34, 174, 260, -1, -1, -1', '34, 175, 260, -1, -1, -1', '34, 176, 260, -1, -1, -1', '34, 177, 260, -1, -1, -1', '34, 178, 260, -1, -1, -1', '34, 179, 260, -1, -1, -1', '34, 180, 260, -1, -1, -1', '34, 181, 260, -1, -1, -1', '35, 173, 260, -1, -1, -1', '35, 174, 260, -1, -1, -1', '35, 175, 260, -1, -1, -1', '35, 176, 260, -1, -1, -1', '35, 177, 260, -1, -1, -1', '35, 178, 260, -1, -1, -1', '35, 179, 260, -1, -1, -1', '35, 180, 260, -1, -1, -1', '35, 181, 260, -1, -1, -1', '36, 175, 260, -1, -1, -1', '36, 176, 260, -1, -1, -1', '36, 177, 260, -1, -1, -1', '36, 178, 260, -1, -1, -1', '36, 179, 260, -1, -1, -1', '36, 180, 260, -1, -1, -1', '36, 181, 260, -1, -1, -1', '37, 176, 260, -1, -1, -1', '37, 177, 260, -1, -1, -1', '37, 178, 260, -1, -1, -1', '37, 179, 260, -1, -1, -1', '37, 180, 260, -1, -1, -1', '37, 181, 260, -1, -1, -1', '38, 176, 260, -1, -1, -1', '38, 177, 260, -1, -1, -1', '38, 178, 260, -1, -1, -1', '38, 179, 260, -1, -1, -1', '38, 180, 260, -1, -1, -1', '38, 181, 260, -1, -1, -1', '39, 178, 260, -1, -1, -1', '39, 179, 260, -1, -1, -1', '39, 180, 260, -1, -1, -1', '39, 181, 260, -1, -1, -1', '43, 152, 259, -1, -1, -1', '44, 152, 260, -1, -1, -1', '45, 150, 151, -1, -1, -1', '45, 151, 151, -1, -1, -1', '45, 183, 307, -1, -1, -1', '45, 184, 307, -1, -1, -1', '46, 182, 307, -1, -1, -1', '46, 183, 307, -1, -1, -1', '46, 184, 307, -1, -1, -1', '47, 180, 307, -1, -1, -1', '47, 181, 307, -1, -1, -1', '47, 182, 307, -1, -1, -1', '47, 183, 307, -1, -1, -1', '47, 184, 307, -1, -1, -1', '48, 179, 307, -1, -1, -1', '48, 180, 307, -1, -1, -1', '48, 181, 307, -1, -1, -1', '48, 182, 307, -1, -1, -1', '48, 183, 307, -1, -1, -1', '48, 184, 307, -1, -1, -1', '49, 180, 307, -1, -1, -1', '49, 181, 307, -1, -1, -1', '49, 182, 307, -1, -1, -1', '49, 183, 307, -1, -1, -1', '49, 184, 307, -1, -1, -1', '49, 185, 307, -1, -1, -1', '49, 186, 307, -1, -1, -1', '50, 180, 307, -1, -1, -1', '50, 181, 307, -1, -1, -1', '50, 182, 307, -1, -1, -1', '50, 183, 307, -1, -1, -1', '50, 184, 307, -1, -1, -1', '50, 185, 307, -1, -1, -1', '50, 186, 307, -1, -1, -1', '51, 180, 307, -1, -1, -1', '51, 181, 307, -1, -1, -1', '51, 182, 307, -1, -1, -1', '51, 183, 307, -1, -1, -1', '51, 184, 307, -1, -1, -1', '51, 185, 307, -1, -1, -1', '51, 186, 307, -1, -1, -1', '52, 181, 307, -1, -1, -1', '52, 182, 307, -1, -1, -1', '52, 183, 307, -1, -1, -1', '52, 184, 307, -1, -1, -1', '52, 185, 307, -1, -1, -1', '52, 186, 307, -1, -1, -1', '53, 183, 307, -1, -1, -1', '53, 184, 307, -1, -1, -1', '53, 185, 307, -1, -1, -1', '53, 186, 307, -1, -1, -1', '53, 187, 307, -1, -1, -1', '53, 188, 307, -1, -1, -1', '54, 184, 307, -1, -1, -1', '54, 185, 307, -1, -1, -1', '54, 186, 307, -1, -1, -1', '54, 187, 307, -1, -1, -1', '54, 188, 307, -1, -1, -1', '55, 185, 307, -1, -1, -1', '55, 186, 307, -1, -1, -1', '55, 187, 307, -1, -1, -1', '55, 188, 307, -1, -1, -1', '56, 185, 307, -1, -1, -1', '56, 186, 307, -1, -1, -1', '56, 187, 307, -1, -1, -1', '56, 188, 307, -1, -1, -1', '57, 186, 307, -1, -1, -1', '57, 187, 307, -1, -1, -1', '57, 188, 307, -1, -1, -1', '57, 189, 307, -1, -1, -1', '57, 190, 307, -1, -1, -1', '57, 191, 307, -1, -1, -1', '58, 186, 307, -1, -1, -1', '58, 187, 307, -1, -1, -1', '58, 188, 307, -1, -1, -1', '58, 189, 307, -1, -1, -1', '58, 190, 307, -1, -1, -1', '58, 191, 307, -1, -1, -1', '59, 187, 307, -1, -1, -1', '59, 188, 307, -1, -1, -1', '59, 189, 307, -1, -1, -1', '59, 190, 307, -1, -1, -1', '59, 191, 307, -1, -1, -1', '60, 189, 307, -1, -1, -1'], False, False);
end;


procedure OnTick;
var
  I, K: Integer;
begin
  for I := 3 to 11 do
    if States.GameTime mod AUTOFEED_TIME = 5 * I then
      AutoFeed(I);

  if States.GameTime mod DEPOSITS_TIME = 0 then
    UpdateDeposits;

  if States.GameTime mod TARGETS_TIME = 0 then
    UpdateTargets;

  for K := 0 to 2 do
    if States.PlayerEnabled(K) then
      if not Msg then
        if States.FogRevealed(K, 69, 67) then
          Message;

  for K := 0 to 2 do
    if SoundAllowed[K] then
    begin
      if (States.KaMRandom > 0.5)
      and (States.GameTime mod AMBIENT_TIME = 0) then
      begin
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 140, 5);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 180, 25);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 186, 77);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 150, 133);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 122, 122);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 104, 50);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 167, 200);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 125, 190);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 109, 168);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 130, 74);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 7, 120);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 63, 124);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 71, 89);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 71, 39);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 54, 10);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 9, 9);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 15, 86);
        Actions.PlayOGGAtLocation(K, 'Quack' + IntToStr(1 + States.KaMRandomI(3)), 0.75, 32, 46, 57);
      end;

      if (States.KaMRandom < 0.4)
      and (States.GameTime mod AMBIENT_TIME = 33) then
        if Length(Wolves) > 0 then
          for I := Low(Wolves) to High(Wolves) do
            if not States.UnitDead(Wolves[I]) then
              if States.KaMRandom < 0.25 then
                 Actions.PlayOGGAtLocation(K, 'Wolf' + IntToStr(1 + States.KaMRandomI(3)), Utils.MinS(States.KaMRandom, 0.35), 32, States.UnitPositionX(Wolves[I]), States.UnitPositionY(Wolves[I]));

    end;

end;